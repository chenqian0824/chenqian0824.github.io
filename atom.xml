<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余真帆的个人博客</title>
  <subtitle>一个专注于技术的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanerge.github.io/"/>
  <updated>2017-08-13T09:29:49.351Z</updated>
  <id>https://fanerge.github.io/</id>
  
  <author>
    <name>余真帆-fanerge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js面向对象编程-非构造函数的继承</title>
    <link href="https://fanerge.github.io/2017/08/13/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-2/"/>
    <id>https://fanerge.github.io/2017/08/13/js面向对象编程-2/</id>
    <published>2017-08-13T08:08:41.000Z</published>
    <updated>2017-08-13T09:29:49.351Z</updated>
    
    <content type="html"><![CDATA[<p>重新复习 – js面向对象编程知识，本文介绍-对象之间的非构造函数实现”继承”。</p>
<h4 id="先来两个对象（父类和子类）"><a href="#先来两个对象（父类和子类）" class="headerlink" title="先来两个对象（父类和子类）"></a>先来两个对象（父类和子类）</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let Chinese = &#123;</div><div class="line">	nation: &apos;中国&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let Doctor = &#123;</div><div class="line">	career: &apos;医生&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</code></pre><h4 id="一、object-方法"><a href="#一、object-方法" class="headerlink" title="一、object()方法"></a>一、object()方法</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let Chinese = &#123;</div><div class="line">	nation: &apos;中国&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function object (o) &#123;</div><div class="line">	function F () &#123;&#125;;</div><div class="line">	F.prototype = o;</div><div class="line">	return new F();</div><div class="line">&#125;</div><div class="line"></div><div class="line">let Doctor = object(Chinese);</div><div class="line">Doctor.career = &apos;医生&apos;;</div><div class="line">console.log(Doctor.nation) // 中国</div></pre></td></tr></table></figure>

这个object()函数，其实只做一件事，就是把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。
</code></pre><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><pre><code>把父对象的属性，全部拷贝给子对象，也能实现继承。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let Chinese = &#123;</div><div class="line">	nation: &apos;中国&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function extendCopy (p) &#123;</div><div class="line">	let c = &#123;&#125;;</div><div class="line">	for (let i in p) &#123;</div><div class="line">		c[i] = p[i];</div><div class="line">	&#125;</div><div class="line">	return c;</div><div class="line">&#125;</div><div class="line">let Doctor = extendCopy(Chinese);</div><div class="line">Doctor.career = &apos;医生&apos;;</div><div class="line">console.log(Doctor.nation) // 中国</div></pre></td></tr></table></figure>

存在问题：只拷贝基本类型，对于引用类型拷贝内存地址，存在父对象别篡改的可能。
</code></pre><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><pre><code>所谓&quot;深拷贝&quot;，就是能够实现真正意义上的数组和对象的拷贝。它的实现并不难，只要递归调用&quot;浅拷贝&quot;就行了。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">let Chinese = &#123;</div><div class="line">	nation: &apos;中国&apos;,</div><div class="line">	cities: [&apos;成都&apos;, &apos;北京&apos;]</div><div class="line">&#125;;</div><div class="line">function deepCopy(p, c) &#123;</div><div class="line">	var c = c || &#123;&#125;;</div><div class="line">	for (let i in p) &#123;</div><div class="line">		if (typeof p[i] === &apos;object&apos;) &#123;</div><div class="line">			c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</div><div class="line">			deepCopy(p[i], c[i]);</div><div class="line">		&#125; else &#123;</div><div class="line">			c[i] = p[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return c;</div><div class="line">&#125; </div><div class="line">let Doctor = deepCopy(Chinese);</div><div class="line">Doctor.career = &apos;医生&apos;;</div><div class="line">console.log(Doctor.cities)  // [&quot;成都&quot;, &quot;北京&quot;]</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>   参考：<br>    <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="external">阮老师-Javascript面向对象编程（三）：非构造函数的继承</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重新复习 – js面向对象编程知识，本文介绍-对象之间的非构造函数实现”继承”。&lt;/p&gt;
&lt;h4 id=&quot;先来两个对象（父类和子类）&quot;&gt;&lt;a href=&quot;#先来两个对象（父类和子类）&quot; class=&quot;headerlink&quot; title=&quot;先来两个对象（父类和子类）&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="面向对象编程" scheme="https://fanerge.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="js" scheme="https://fanerge.github.io/tags/js/"/>
    
      <category term="面向对象编程" scheme="https://fanerge.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js面向对象编程-构造函数的继承</title>
    <link href="https://fanerge.github.io/2017/08/13/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-1/"/>
    <id>https://fanerge.github.io/2017/08/13/js面向对象编程-1/</id>
    <published>2017-08-13T06:52:40.000Z</published>
    <updated>2017-08-13T09:29:45.783Z</updated>
    
    <content type="html"><![CDATA[<p>重新复习 – js面向对象编程知识，本文介绍-对象之间的”继承”的五种方法。</p>
<h4 id="先来两个构造函数（父类和子类）"><a href="#先来两个构造函数（父类和子类）" class="headerlink" title="先来两个构造函数（父类和子类）"></a>先来两个构造函数（父类和子类）</h4><pre><code>现有一个&quot;动物&quot;对象的构造函数
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function Animal () &#123;</div><div class="line">	this.species = &quot;动物&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

再来一只&quot;猫&quot;对象的构造函数
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function Cat (name, color) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.color = color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h4 id="一、构造函数绑定"><a href="#一、构造函数绑定" class="headerlink" title="一、构造函数绑定"></a>一、构造函数绑定</h4><pre><code>使用call或apply方法，将父对象的构造函数绑定在子对象上。    
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function Cat (name, color) &#123;</div><div class="line">	Animal.call(this, arguments); // 构造函数绑定-继承</div><div class="line">	this.name = name;</div><div class="line">	this.color = color;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var cat1 = new Cat(&apos;小白&apos;, &apos;红色&apos;);</div><div class="line">console.log(cat1); // &#123;species: &quot;动物&quot;, name: &quot;小白&quot;, color: &quot;红色&quot;&#125;</div></pre></td></tr></table></figure>
</code></pre><h4 id="二、prototype模式"><a href="#二、prototype模式" class="headerlink" title="二、prototype模式"></a>二、prototype模式</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Animal () &#123;</div><div class="line">	this.species = &quot;动物&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Cat (name, color) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype = new Animal(); // prototype模式-继承</div><div class="line">Cat.prototype.constructor = Cat; // 重新将constructor指向Cat</div><div class="line"></div><div class="line">var cat1 = new Cat(&apos;小白&apos;, &apos;红色&apos;);</div><div class="line">console.log(cat1.species); // 动物</div></pre></td></tr></table></figure>
</code></pre><h4 id="三、直接继承prototype"><a href="#三、直接继承prototype" class="headerlink" title="三、直接继承prototype"></a>三、直接继承prototype</h4><pre><code>第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Animal () &#123; &#125;</div><div class="line">Animal.prototype.species = &apos;动物&apos;;</div><div class="line"></div><div class="line">function Cat (name, color) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.color = color;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">Cat.prototype = Animal.prototype; // 直接继承prototype</div><div class="line">Cat.prototype.constructor = Cat;</div><div class="line"></div><div class="line">var cat1 = new Cat(&apos;小白&apos;, &apos;红色&apos;);</div><div class="line">console.log(cat1.species); // 动物</div></pre></td></tr></table></figure>

与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。
console.log(Animal.prototype.constructor); // Cat
</code></pre><h4 id="四、利用空对象作为中介"><a href="#四、利用空对象作为中介" class="headerlink" title="四、利用空对象作为中介"></a>四、利用空对象作为中介</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function Animal () &#123; &#125;</div><div class="line">Animal.prototype.species = &apos;动物&apos;;</div><div class="line"></div><div class="line">function Cat (name, color) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.color = color;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 空对象作为中介</div><div class="line">let F = function () &#123;&#125;;</div><div class="line">F.prototype = Animal.prototype;</div><div class="line"></div><div class="line">Cat.prototype = new F(); </div><div class="line">Cat.prototype.constructor = Cat;</div><div class="line"></div><div class="line">var cat1 = new Cat(&apos;小白&apos;, &apos;红色&apos;);</div><div class="line">console.log(cat1.species); // 动物</div></pre></td></tr></table></figure>

还可以单独封装成方法
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let extend = function (child, parent) &#123;</div><div class="line">	let F = function () &#123;&#125;;</div><div class="line">	F.prototype = parent.prototype;</div><div class="line">	child.prototype = new F();</div><div class="line">	child.prototype.constructor = child;</div><div class="line">&#125;;</div><div class="line">extend(Cat, Animal);</div><div class="line">let cat1 = new Cat(&apos;小白&apos;, &apos;红色&apos;);</div><div class="line">console.log(cat1.species); // 动物</div></pre></td></tr></table></figure>
</code></pre><h4 id="五、拷贝继承"><a href="#五、拷贝继承" class="headerlink" title="五、拷贝继承"></a>五、拷贝继承</h4><pre><code>简单说，如果把父对象的所有属性和方法，拷贝进子对象。    
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function Animal () &#123; &#125;</div><div class="line">Animal.prototype.species = &apos;动物&apos;;</div><div class="line"></div><div class="line">function Cat (name, color) &#123;</div><div class="line">	this.name = name;</div><div class="line">	this.color = color;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 拷贝继承</div><div class="line">function extend2 (child, parent) &#123;</div><div class="line">	let p = parent.prototype;</div><div class="line">	let c = child.prototype;</div><div class="line">	for (let i in p) &#123;</div><div class="line">		c[i] = p[i];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">extend2(Cat, Animal);</div><div class="line">let cat1 = new Cat(&apos;小白&apos;, &apos;红色&apos;);</div><div class="line">console.log(cat1.species) // 动物</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>   参考：<br>    <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="external">阮老师-Javascript面向对象编程（二）：构造函数的继承</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重新复习 – js面向对象编程知识，本文介绍-对象之间的”继承”的五种方法。&lt;/p&gt;
&lt;h4 id=&quot;先来两个构造函数（父类和子类）&quot;&gt;&lt;a href=&quot;#先来两个构造函数（父类和子类）&quot; class=&quot;headerlink&quot; title=&quot;先来两个构造函数（父类和子类）&quot;
    
    </summary>
    
      <category term="面向对象编程" scheme="https://fanerge.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="js" scheme="https://fanerge.github.io/tags/js/"/>
    
      <category term="面向对象编程" scheme="https://fanerge.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js面向对象编程-&quot;封装&quot;（Encapsulation）</title>
    <link href="https://fanerge.github.io/2017/08/13/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://fanerge.github.io/2017/08/13/js面向对象编程/</id>
    <published>2017-08-13T02:44:00.000Z</published>
    <updated>2017-08-13T09:26:43.360Z</updated>
    
    <content type="html"><![CDATA[<p>重新复习 – js面向对象编程知识</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Cat (name, color) &#123;</div><div class="line">	this.name = name; // 使用动态作用域this</div><div class="line">	this.color = color;</div><div class="line">&#125;</div><div class="line">Cat.prototype.type = &apos;猫科动物&apos;;</div><div class="line">Cat.prototype.eat = function () &#123;</div><div class="line">	console.log(&apos;吃老鼠&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let cat1 =new Cat(&apos;大毛&apos;, &apos;黄色&apos;);</div><div class="line">let cat2 =new Cat(&apos;小毛&apos;, &apos;黑色&apos;);</div></pre></td></tr></table></figure>
</code></pre><h4 id="constructor-—-每个实例都有一个constructor属性，指向它们的构造函数"><a href="#constructor-—-每个实例都有一个constructor属性，指向它们的构造函数" class="headerlink" title="constructor — 每个实例都有一个constructor属性，指向它们的构造函数"></a>constructor — 每个实例都有一个constructor属性，指向它们的构造函数</h4><pre><code>// console.log(cat1.constructor == Cat) true
</code></pre><h4 id="instanceof-—-验证原型对象与实例之间的关系"><a href="#instanceof-—-验证原型对象与实例之间的关系" class="headerlink" title="instanceof — 验证原型对象与实例之间的关系"></a>instanceof — 验证原型对象与实例之间的关系</h4><pre><code>// console.log(cat1 instanceof Cat) true
// console.log(cat1.type); 猫科动物
// console.log(cat1.type === cat2.type) true 都从原型中获得
// cat1.eat() 吃老鼠
</code></pre><h5 id="isPrototypeOf-—-某个proptotype对象和某个实例之间的关系。"><a href="#isPrototypeOf-—-某个proptotype对象和某个实例之间的关系。" class="headerlink" title="isPrototypeOf() — 某个proptotype对象和某个实例之间的关系。"></a>isPrototypeOf() — 某个proptotype对象和某个实例之间的关系。</h5><pre><code>// console.log(Cat.prototype.isPrototypeOf(cat1)) true
</code></pre><h5 id="hasOwnProperty-—-每个实例对象都有一个hasOwnProperty-方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。"><a href="#hasOwnProperty-—-每个实例对象都有一个hasOwnProperty-方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。" class="headerlink" title="hasOwnProperty() — 每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。"></a>hasOwnProperty() — 每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。</h5><pre><code>// console.log(cat1.hasOwnProperty(&apos;name&apos;)); true
// console.log(cat1.hasOwnProperty(&apos;eat&apos;)); false
</code></pre><h5 id="in运算符-—-某个实例是否含有某个属性，不管是不是本地属性"><a href="#in运算符-—-某个实例是否含有某个属性，不管是不是本地属性" class="headerlink" title="in运算符 — 某个实例是否含有某个属性，不管是不是本地属性"></a>in运算符 — 某个实例是否含有某个属性，不管是不是本地属性</h5><pre><code>// console.log(&apos;name&apos; in cat1); true
// console.log(&apos;eat&apos; in cat1); true
</code></pre><h4 id="总结对象属性的遍历"><a href="#总结对象属性的遍历" class="headerlink" title="总结对象属性的遍历"></a>总结对象属性的遍历</h4><pre><code>1.    in --- 遍历**可枚举的自身属性和继承属性**
2.    Object.getOwnPropertyNames() --- 遍历所有的自身属性
3.    Object.keys(obj) --- 遍历**可枚举的自身属性**，返回一个属性数组
</code></pre><blockquote>
<p>   参考：<br>    <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html" target="_blank" rel="external">阮老师-Javascript面向对象编程（一）：封装</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重新复习 – js面向对象编程知识&lt;/p&gt;
&lt;h3 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
    
    </summary>
    
      <category term="面向对象编程" scheme="https://fanerge.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="js" scheme="https://fanerge.github.io/tags/js/"/>
    
      <category term="面向对象编程" scheme="https://fanerge.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-读书笔记</title>
    <link href="https://fanerge.github.io/2017/08/11/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-7/"/>
    <id>https://fanerge.github.io/2017/08/11/js函数式编程-读书笔记-7/</id>
    <published>2017-08-11T12:59:55.000Z</published>
    <updated>2017-08-13T03:08:05.210Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="基于流的编程-or-无类编程"><a href="#基于流的编程-or-无类编程" class="headerlink" title="基于流的编程 or 无类编程"></a>基于流的编程 or 无类编程</h3><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">function createPerson () &#123;</div><div class="line">	let firstName = &apos;&apos;;</div><div class="line">	let lastName = &apos;&apos;;</div><div class="line">	let age = 0;</div><div class="line">	return &#123;</div><div class="line">		setFirstName: function (fn) &#123;</div><div class="line">			firstName = fn;</div><div class="line">			return this;	</div><div class="line">		&#125;,</div><div class="line">		setLastName: function (fn) &#123;</div><div class="line">			lastName = fn;</div><div class="line">			return this;	</div><div class="line">		&#125;,</div><div class="line">		setAge: function (fn) &#123;</div><div class="line">			age = fn;</div><div class="line">			return this;</div><div class="line">		&#125;,</div><div class="line">		toString: function () &#123;</div><div class="line">			return [firstName, lastName, age].join(&apos; &apos;);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let dd = createPerson()</div><div class="line">		.setFirstName(&apos;yu&apos;)</div><div class="line">		.setLastName(&apos;fan&apos;)</div><div class="line">		.setAge(11)</div><div class="line">		.toString();</div><div class="line">console.log(dd) // yu fan 11</div></pre></td></tr></table></figure>
</code></pre><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><pre><code>pipeline(a, _.compact, _.initial, _.rest, rev) // 对数据a进行一系列的操作
</code></pre><h4 id="数据流与控制流"><a href="#数据流与控制流" class="headerlink" title="数据流与控制流"></a>数据流与控制流</h4><h3 id="无类编程"><a href="#无类编程" class="headerlink" title="无类编程"></a>无类编程</h3><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h4 id="数据导向"><a href="#数据导向" class="headerlink" title="数据导向"></a>数据导向</h4><h4 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">类层次结构</div><div class="line">function ContainerClass () &#123;&#125;</div><div class="line">function ObservedContainerClass () &#123;&#125;</div><div class="line">function HoleClass () &#123;&#125;</div><div class="line">function CASClass () &#123;&#125;</div><div class="line">function TableBaseClass () &#123;&#125;</div><div class="line"></div><div class="line">ObservedContainerClass.prototype = new ContainerClass();</div><div class="line">HoleClass.prototype = new ObservedContainerClass();</div><div class="line">CASClass.prototype = new HoleClass();</div><div class="line">TableBaseClass.prototype = new HoleClass();</div><div class="line"></div><div class="line">// 用Mixin扁平化层级结构</div><div class="line">function Container (val) &#123;</div><div class="line">	this._value = val;</div><div class="line">	this.init(val);</div><div class="line">&#125;</div><div class="line">Container.prototype.init = _.identity;</div><div class="line">let Hole = function (val) &#123;</div><div class="line">	Container.call(this, val);</div><div class="line">&#125;</div><div class="line">let HoleMixin = &#123;</div><div class="line">	setValue: function (newValue) &#123;</div><div class="line">		let oldVal = this._value;</div><div class="line">		this.validate(newValue);</div><div class="line">		this._value = newValue;</div><div class="line">		this.notify(oldVal, newValue);</div><div class="line">		return this._value;</div><div class="line">	&#125;,</div><div class="line">&#125;;</div><div class="line">let ObserverMixin = (function () &#123;</div><div class="line">	let _watchers = [];</div><div class="line">	return &#123;</div><div class="line">		watch: function (fun) &#123;</div><div class="line">			_watchers.push(fun);</div><div class="line">			return _.size(_watchers);</div><div class="line">		&#125;,</div><div class="line">		notify: function (oldVal, newVal) &#123;</div><div class="line">			_.each(_._watchers, function (watcher) &#123;</div><div class="line">				watcher.call(this, oldVal, newVal);</div><div class="line">			&#125;);</div><div class="line">			return _.size(_watchers);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;);</div><div class="line">let ValidateMixin = &#123;</div><div class="line">	addValidator: function (fun) &#123;</div><div class="line">		this._validator = fun;</div><div class="line">	&#125;,</div><div class="line">	init: function (val) &#123;</div><div class="line">		this.validate(val);</div><div class="line">	&#125;,</div><div class="line">	validate: function (val) &#123;</div><div class="line">		if (existy(this._validator) &amp;&amp;</div><div class="line">			!this._validator(val)) &#123;</div><div class="line">			fail(&apos;Attrmpted to set invalid value&apos; + polyToString(val));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">_.extend(Hole.prototype, HoleMixin, ValidateMixin, ObserverMixin); // 同级继承</div><div class="line">let h = new Hole(43);</div><div class="line">h.addValidator(always(false));</div><div class="line">console.log(h); // 43</div><div class="line"></div><div class="line">let SwapMixin = &#123;</div><div class="line">	swap: function (fun) &#123;</div><div class="line">		let args = _.rest(arguemnts);</div><div class="line">		let newValue = fun.apply(this, _.identity);</div><div class="line">		return this.setValue(newValue);</div><div class="line">	&#125;,</div><div class="line">&#125;;</div><div class="line">let o = &#123;_value: 0, setValue: _.identity&#125;</div><div class="line">_.extend(o, SwapMixin);</div><div class="line">o.swap(construct, [1, 2, 3]); //[0, 1, 2, 3]</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>   源代码仓库<br>    <a href="https://github.com/fanerge/Functional-reading-notes" target="_blank" rel="external">函数式编程-读书笔记</a></p>
</blockquote>
<pre><code>```
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;基于流的编程-or-无类编程&quot;&gt;&lt;a href=&quot;#基于流的编程
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-纯度、不变性和更改政策</title>
    <link href="https://fanerge.github.io/2017/08/10/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-6/"/>
    <id>https://fanerge.github.io/2017/08/10/js函数式编程-读书笔记-6/</id>
    <published>2017-08-10T13:13:43.000Z</published>
    <updated>2017-08-13T03:07:29.702Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="纯度、不变性和更改政策"><a href="#纯度、不变性和更改政策" class="headerlink" title="纯度、不变性和更改政策"></a>纯度、不变性和更改政策</h3><h4 id="纯度"><a href="#纯度" class="headerlink" title="纯度"></a>纯度</h4><pre><code>纯函数
1.其结果只能从它的参数的值来计算
2.不能依赖于能被外部操作改变的数据
3.不能改变外部状态
</code></pre><h4 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">// 不变性</div><div class="line">function summ (array) &#123;</div><div class="line">	let result = 0;</div><div class="line">	let sz = array.length;</div><div class="line">	for (let i = 0; i &lt; sz; i++) &#123;</div><div class="line">		result += array[i];</div><div class="line">	&#125;</div><div class="line">	return result;</div><div class="line">&#125;</div><div class="line">let dd = summ(_.range(1, 11));</div><div class="line">console.log(dd); // 55</div><div class="line"></div><div class="line">// 递归</div><div class="line">function summRec (array, seed) &#123;</div><div class="line">	if (_.isEmpty(array))&#123;</div><div class="line">		return seed;</div><div class="line">	&#125; else &#123;</div><div class="line">		return summRec(_.rest(array), _.first(array) + seed)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let dd = summRec(_.range(1, 11), 0);</div><div class="line">console.log(dd); // 55</div><div class="line"></div><div class="line">// 冻结和克隆</div><div class="line">Object.freeze(a) // 浅冻结</div><div class="line">// 深冻结</div><div class="line">function deepFreeze(obj) &#123;</div><div class="line">	if (!Object.isFrozen(obj)) &#123;</div><div class="line">		Object.freeze(obj);</div><div class="line">	&#125;</div><div class="line">	for (let key in obj) &#123;</div><div class="line">		if (!obj.hasOwnProperty(key) || !_.isObject(obj[key])) &#123;</div><div class="line">			continue;</div><div class="line">		&#125;</div><div class="line">		deepFreeze(obj[key]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let x = [&#123;a: [1, 2, 3], b: 42&#125;, &#123;c: &#123;d: []&#125;&#125;];</div><div class="line">deepFreeze(x);</div><div class="line">x[0] = null;</div><div class="line">console.dir(x); // [&#123;a: [1, 2, 3], b: 42&#125;, &#123;c: &#123;d: []&#125;&#125;]</div></pre></td></tr></table></figure>
</code></pre><h4 id="控制变化的政策"><a href="#控制变化的政策" class="headerlink" title="控制变化的政策"></a>控制变化的政策</h4><pre><code>用容器封装数据，不能直接更改数据。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function Container (init) &#123;</div><div class="line">	this._value = init;</div><div class="line">&#125;</div><div class="line">Container.prototype = &#123;</div><div class="line">	update: function (fun) &#123;</div><div class="line">		let args = _.rest(arguments);</div><div class="line">		let oldValue = this._value;</div><div class="line"></div><div class="line">		this._value = fun.apply(this, constructor(oldValue, args));</div><div class="line">		return this._value;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">let aNumber = new Container(42);</div><div class="line">let dd = aNumber.update(function (n) &#123; return n + 1; &#125;);</div><div class="line">console.log(dd) // 43</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>   源代码仓库<br>    <a href="https://github.com/fanerge/Functional-reading-notes" target="_blank" rel="external">函数式编程-读书笔记</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;纯度、不变性和更改政策&quot;&gt;&lt;a href=&quot;#纯度、不变性和更改
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-递归</title>
    <link href="https://fanerge.github.io/2017/08/09/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-5/"/>
    <id>https://fanerge.github.io/2017/08/09/js函数式编程-读书笔记-5/</id>
    <published>2017-08-09T13:07:36.000Z</published>
    <updated>2017-08-13T03:07:43.987Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="自吸收函数（调用自己的函数）"><a href="#自吸收函数（调用自己的函数）" class="headerlink" title="自吸收函数（调用自己的函数）"></a>自吸收函数（调用自己的函数）</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">function myLength (ary) &#123;</div><div class="line">	if (_.isEmpty(ary)) &#123;</div><div class="line">		return 0;</div><div class="line">	&#125; else &#123;</div><div class="line">		return 1 + myLength(_.rest(ary));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let dd = myLength([1, 2, 3]);</div><div class="line">console.log(dd); // 3</div><div class="line"></div><div class="line">function cycle(times, ary) &#123;</div><div class="line">	if (times &lt;= 0) &#123;</div><div class="line">		return [];</div><div class="line">	&#125; else &#123;</div><div class="line">		return cat(ary, cycle(times -1, ary));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let dd = cycle(2, [1, 2, 3]);</div><div class="line">console.log(dd); // [1, 2, 3, 1, 2, 3]</div><div class="line"></div><div class="line">*_.zip*</div><div class="line">function cycle(times, ary) &#123;</div><div class="line">	if (times &lt;= 0) &#123;</div><div class="line">		return [];</div><div class="line">	&#125; else &#123;</div><div class="line">		return cat(ary, cycle(times -1, ary));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let dd = _.zip([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], [1, 2, 3]);</div><div class="line">console.dir(dd); // [[&apos;a&apos;, 1],[&apos;b&apos;, 2], [&apos;c&apos;, 3]]</div></pre></td></tr></table></figure>

// 深度优先自递归搜索
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">*andify 组合函数*</div><div class="line">function andify () &#123;</div><div class="line">	let preds = _.toArray(arguments);</div><div class="line">	return function () &#123;</div><div class="line">		let args = _.toArray(arguments);</div><div class="line">		let everything = function (ps, truth) &#123;</div><div class="line">			if (_.isEmpty(ps)) &#123;</div><div class="line">				return truth;</div><div class="line">			&#125; else &#123;</div><div class="line">				return _.every(args, _.first(ps))</div><div class="line">						&amp;&amp; everything(_.rest(ps), truth);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		return everything(preds, true);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let evenNums = andify(_.isNumber, isEven);</div><div class="line">console.log(evenNums(4, 2)); // true</div><div class="line"></div><div class="line">*andify 组合函数*</div><div class="line">function orify () &#123;</div><div class="line">	let preds = _.toArray(arguments);</div><div class="line">	return function () &#123;</div><div class="line">		let args = _.toArray(arguments);</div><div class="line">		let something = function (ps, truth) &#123;</div><div class="line">			if (_.isEmpty(ps)) &#123;</div><div class="line">				return truth;</div><div class="line">			&#125; else &#123;</div><div class="line">				return _.some(args, _.first(ps))</div><div class="line">						|| something(_.rest(ps), truth);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		return something(preds, true);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let evenNums = orify(_.isNumber, isEven);</div><div class="line">console.log(evenNums(1, 2)); // true</div></pre></td></tr></table></figure>
</code></pre><h4 id="相互关联函数（函数调用其他会再调用回他的函数）"><a href="#相互关联函数（函数调用其他会再调用回他的函数）" class="headerlink" title="相互关联函数（函数调用其他会再调用回他的函数）"></a>相互关联函数（函数调用其他会再调用回他的函数）</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">function evenSteven(n) &#123;</div><div class="line">	if (n === 0) &#123;</div><div class="line">		return true;</div><div class="line">	&#125; else &#123;</div><div class="line">		return oddJohn(Math.abs(n) - 1);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function oddJohn(n) &#123;</div><div class="line">	if (n === 0) &#123;</div><div class="line">		return false;</div><div class="line">	&#125; else &#123;</div><div class="line">		return evenSteven(Math.abs(n) - 1);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let dd = evenSteven(3);</div><div class="line">console.log(dd); // false</div><div class="line"></div><div class="line">*flat 展开嵌套数组*</div><div class="line">function flat(array) &#123;</div><div class="line">	if (_.isArray(array)) &#123;</div><div class="line">		return cat.apply(cat, _.map(array, flat));</div><div class="line">	&#125; else &#123;</div><div class="line">		return [array];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let dd = flat([[1, 2], [3, 4]]);</div><div class="line">console.log(dd) // [1, 2, 3, 4]</div><div class="line"></div><div class="line">*clone 浅clone*</div><div class="line">let x = [&#123;a: [1, 2, 3], b: 42&#125;, &#123;c: &#123;d: []&#125;&#125;]</div><div class="line">let y = _.clone(x);</div><div class="line">console.log(y) // [&#123;a: [1, 2, 3], b: 42&#125;, &#123;c: &#123;d: []&#125;&#125;]	</div><div class="line"></div><div class="line">*deepClone 深clone*</div><div class="line">function deepClone(obj) &#123;</div><div class="line">	if (!existy(obj) || !_.isObject(obj)) &#123;</div><div class="line">		return obj;</div><div class="line">	&#125;</div><div class="line">	let temp = new obj.constructor();</div><div class="line">	for (let key in obj) &#123;</div><div class="line">		if (obj.hasOwnProperty(key)) &#123;</div><div class="line">			temp[key] = deepClone(obj[key]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return temp;</div><div class="line">&#125;</div><div class="line">let x = [&#123;a: [1, 2, 3], b: 42&#125;, &#123;c: &#123;d: []&#125;&#125;]</div><div class="line">let y = deepClone(x);</div><div class="line">x[1][&apos;c&apos;][&apos;d&apos;] = 100;</div><div class="line">console.log(_.isEqual(x, y)); // false</div><div class="line"></div><div class="line">// 遍历嵌套数组的数组</div><div class="line">function visit(mapFun, resultFun, array) &#123;</div><div class="line">	if (_.isArray(array)) &#123;</div><div class="line">		return resultFun(_.map(array, mapFun));</div><div class="line">	&#125; else &#123;</div><div class="line">		return resultFun(array);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let dd = visit(_.identity, _.isNumber, 42);</div><div class="line">console.log(dd); // true</div></pre></td></tr></table></figure>
</code></pre><h4 id="太多递归了"><a href="#太多递归了" class="headerlink" title="太多递归了"></a>太多递归了</h4><h4 id="递归是一个底层操作"><a href="#递归是一个底层操作" class="headerlink" title="递归是一个底层操作"></a>递归是一个底层操作</h4><blockquote>
<p>   源代码仓库<br>    <a href="https://github.com/fanerge/Functional-reading-notes" target="_blank" rel="external">函数式编程-读书笔记</a>    </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerl
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JSP学习-了解</title>
    <link href="https://fanerge.github.io/2017/08/09/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    <id>https://fanerge.github.io/2017/08/09/服务端学习/</id>
    <published>2017-08-09T11:56:56.000Z</published>
    <updated>2017-08-09T12:06:00.711Z</updated>
    
    <content type="html"><![CDATA[<p>最近，由于最近项目需要集成到老项目中去，采用原始的前后端不分离开发，需要学习jsp语言。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="JSP简介"><a href="#JSP简介" class="headerlink" title="JSP简介"></a>JSP简介</h3><pre><code>1.    JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。
</code></pre><h3 id="JSP-生命周期"><a href="#JSP-生命周期" class="headerlink" title="JSP 生命周期"></a>JSP 生命周期</h3><pre><code>1.    编译阶段：
当浏览器请求JSP页面时，JSP引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。
编译的过程包括三个步骤：
    解析JSP文件。
    将JSP文件转为servlet。
    编译servlet。
2.    初始化阶段：
    容器载入JSP文件后，它会在为请求提供任何服务前调用jspInit()方法。如果您需要执行自定义的JSP初始化任务，复写jspInit()方法就行了，就像下面这样：
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void jspInit()&#123;</div><div class="line">  // 初始化代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>

    一般来讲程序只初始化一次，servlet也是如此。通常情况下您可以在jspInit()方法中初始化数据库连接、打开文件和创建查询表。
执行阶段：
    这一阶段描述了JSP生命周期中一切与请求相关的交互行为，直到被销毁。
    当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。
    _jspService()方法需要一个HttpServletRequest对象和一个HttpServletResponse对象作为它的参数，就像下面这样：
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void _jspService(HttpServletRequest request,</div><div class="line">				 HttpServletResponse response)</div><div class="line">&#123;</div><div class="line">   // 服务端处理代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>

    _jspService()方法在每个request中被调用一次并且负责产生与之相对应的response，并且它还负责产生所有7个HTTP方法的回应，比如GET、POST、DELETE等等。
销毁阶段：
    SP生命周期的销毁阶段描述了当一个JSP网页从容器中被移除时所发生的一切。
    jspDestroy()方法在JSP中等价于servlet中的销毁方法。当您需要执行任何清理工作时复写jspDestroy()方法，比如释放数据库连接或者关闭文件夹等等。
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jspDestroy()方法的格式如下：</div><div class="line">public void jspDestroy()</div><div class="line">&#123;</div><div class="line">   // 清理代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h3><pre><code>语法格式：
    &lt;% 代码片段 %&gt;
    &lt;jsp:scriptlet&gt;
       代码片段
    &lt;/jsp:scriptlet&gt;
中文编码问题：
    &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
JSP声明
    &lt;%! declaration; [ declaration; ]+ ... %&gt;
    &lt;jsp:declaration&gt;
       代码片段
    &lt;/jsp:declaration&gt;
    例子：
    &lt;%! int i = 0; %&gt; 
JSP表达式    
    &lt;%= 表达式 %&gt;
    &lt;jsp:expression&gt;
       表达式
    &lt;/jsp:expression&gt;
JSP注释
    &lt;%-- 注释 --%&gt;
JSP指令
    JSP指令用来设置与整个JSP页面相关的属性。
    &lt;%@ directive attribute=&quot;value&quot; %&gt;
    例子：
    &lt;%@ page ... %&gt;    定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等
    &lt;%@ include ... %&gt;    包含其他文件
    &lt;%@ taglib ... %&gt;    引入标签库的定义，可以是自定义标签
JSP行为
    JSP行为标签使用XML语法结构来控制servlet引擎。
    &lt;jsp:action_name attribute=&quot;value&quot; /&gt;
JSP隐含对象
    JSP支持九个自动定义的变量，江湖人称隐含对象。
    request    HttpServletRequest类的实例
    response    HttpServletResponse类的实例
判断语句
    if-else
        &lt;%! int day =  %&gt;
        &lt;% if (day == 1 | day == 7) { %&gt;
            &lt;p&gt;今天是周末&lt;/p&gt;
        &lt;% } else { %&gt;
              &lt;p&gt;今天不是周末&lt;/p&gt;
        &lt;% } %&gt;
    switch-case
        &lt;% 
        switch(day) {
        case 0:
           out.println(&quot;星期天&quot;);
           break;
        case 1:
           out.println(&quot;星期一&quot;);
           break;
        default:
           out.println(&quot;星期六&quot;);
        }
        %&gt;
循环语句
    for
        &lt;%for ( fontSize = 1; fontSize &lt;= 3; fontSize++){ %&gt;
           &lt;font color=&quot;green&quot; size=&quot;&lt;%= fontSize %&gt;&quot;&gt;
            菜鸟教程
           &lt;/font&gt;&lt;br /&gt;
        &lt;%}%&gt;
    while
        &lt;%while ( fontSize &lt;= 3){ %&gt;
           &lt;font color=&quot;green&quot; size=&quot;&lt;%= fontSize %&gt;&quot;&gt;
            菜鸟教程
           &lt;/font&gt;&lt;br /&gt;
        &lt;%fontSize++;%&gt;
        &lt;%}%&gt;
JSP 字面量
    布尔值(boolean)：true 和 false;
    整型(int)：与 Java 中的一样;
    浮点型(float)：与 Java 中的一样;
    字符串(string)：以单引号或双引号开始和结束;
    Null：null。
</code></pre><h3 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h3><pre><code>JSP指令用来设置整个JSP页面相关的属性，如网页的编码方式和脚本语言。
    &lt;%@ directive attribute=&quot;value&quot; %&gt;
Page指令
    Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。
    &lt;%@ page attribute=&quot;value&quot; %&gt;
    &lt;jsp:directive.page attribute=&quot;value&quot; /&gt;
Include指令
    JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。
    &lt;%@ include file=&quot;文件相对 url 地址&quot; %&gt;
    &lt;jsp:directive.include file=&quot;文件相对 url 地址&quot; /&gt;
Taglib指令
    JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。
    &lt;%@ taglib uri=&quot;uri&quot; prefix=&quot;prefixOfTag&quot; %&gt;
    &lt;jsp:directive.taglib uri=&quot;uri&quot; prefix=&quot;prefixOfTag&quot; /&gt;
</code></pre><h3 id="JSP动作元素"><a href="#JSP动作元素" class="headerlink" title="JSP动作元素"></a>JSP动作元素</h3><pre><code>JSP动作元素在请求处理阶段起作用。JSP动作元素是用XML语法写成的。
    &lt;jsp:action_name attribute=&quot;value&quot; /&gt;
</code></pre><h3 id="JSP隐式对象"><a href="#JSP隐式对象" class="headerlink" title="JSP隐式对象"></a>JSP隐式对象</h3><pre><code>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。    
</code></pre><h3 id="JSP客户端请求"><a href="#JSP客户端请求" class="headerlink" title="JSP客户端请求"></a>JSP客户端请求</h3><pre><code>当浏览器请求一个网页时，它会向网络服务器发送一系列不能被直接读取的信息，因为这些信息是作为HTTP信息头的一部分来传送的。您可以查阅HTTP协议来获得更多的信息。
</code></pre><h3 id="JSP服务器响应"><a href="#JSP服务器响应" class="headerlink" title="JSP服务器响应"></a>JSP服务器响应</h3><pre><code>Response响应对象主要将JSP容器处理后的结果传回到客户端。可以通过response变量设置HTTP的状态和向客户端发送数据，如Cookie、HTTP文件头信息等。
</code></pre><h3 id="JSP-HTTP状态码"><a href="#JSP-HTTP状态码" class="headerlink" title="JSP HTTP状态码"></a>JSP HTTP状态码</h3><pre><code>以状态行+CRLF（回车换行）开始
零行或多行头模块+CRLF
一个空行，比如CRLF
可选的消息体比如文件，查询数据，查询输出
</code></pre><h3 id="JSP-表单处理"><a href="#JSP-表单处理" class="headerlink" title="JSP 表单处理"></a>JSP 表单处理</h3><pre><code>JSP 读取表单数据
    getParameter(): 使用 request.getParameter() 方法来获取表单参数的值。
    getParameterValues(): 获得如checkbox类（名字相同，但值有多个）的数据。 接收数组变量 ，如checkbox类型
    getParameterNames():该方法可以取得所有变量的名称，该方法返回一个Emumeration。
    getInputStream():调用此方法来读取来自客户端的二进制数据流。
</code></pre><h3 id="JSP过滤器"><a href="#JSP过滤器" class="headerlink" title="JSP过滤器"></a>JSP过滤器</h3><pre><code>JSP 和 Servlet 中的过滤器都是 Java 类。
过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。
可以将一个或多个过滤器附加到一个 Servlet 或一组 Servlet。过滤器也可以附加到 JavaServer Pages (JSP) 文件和 HTML 页面。
过滤器是可用于 Servlet 编程的 Java 类，可以实现以下目的：
在客户端的请求访问后端资源之前，拦截这些请求。
在服务器的响应发送回客户端之前，处理这些响应。
</code></pre><h3 id="JSP-Cookie-处理"><a href="#JSP-Cookie-处理" class="headerlink" title="JSP Cookie 处理"></a>JSP Cookie 处理</h3><pre><code>Cookie是存储在客户机的文本文件，它们保存了大量轨迹信息。在servlet技术基础上，JSP显然能够提供对HTTP cookie的支持。
</code></pre><h3 id="JSP-Session"><a href="#JSP-Session" class="headerlink" title="JSP Session"></a>JSP Session</h3><pre><code>有三种方法来维持客户端与服务器的会话
    Cookies
    隐藏表单域  &lt;input type=&quot;hidden&quot; name=&quot;sessionid&quot; value=&quot;12345&quot;&gt;
    重写URL   http://w3cschool.cc/file.htm;sessionid=12345
session对象
    JSP利用servlet提供的HttpSession接口来识别一个用户，存储这个用户的所有访问信息。
    默认情况下，JSP允许会话跟踪，一个新的HttpSession对象将会自动地为新的客户端实例化。
</code></pre><h3 id="JSP-文件上传"><a href="#JSP-文件上传" class="headerlink" title="JSP 文件上传"></a>JSP 文件上传</h3><h3 id="JSP-日期处理"><a href="#JSP-日期处理" class="headerlink" title="JSP 日期处理"></a>JSP 日期处理</h3><pre><code>使用JSP最重要的优势之一，就是可以使用所有Java  API。本章将会详细地讲述Java中的Date类，它在java.util包下，封装了当前日期和时间。
</code></pre><h3 id="JSP-页面重定向"><a href="#JSP-页面重定向" class="headerlink" title="JSP 页面重定向"></a>JSP 页面重定向</h3><pre><code>当需要将文档移动到一个新的位置时，就需要使用JSP重定向了。
</code></pre><h3 id="JSP-点击量统计"><a href="#JSP-点击量统计" class="headerlink" title="JSP 点击量统计"></a>JSP 点击量统计</h3><h3 id="JSP-自动刷新"><a href="#JSP-自动刷新" class="headerlink" title="JSP 自动刷新"></a>JSP 自动刷新</h3><pre><code>想象一下，如果要直播比赛的比分，或股票市场的实时状态，或当前的外汇配给，该怎么实现呢？显然，要实现这种实时功能，您就不得不规律性地刷新页面。
</code></pre><h3 id="JSP-发送邮件"><a href="#JSP-发送邮件" class="headerlink" title="JSP 发送邮件"></a>JSP 发送邮件</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，由于最近项目需要集成到老项目中去，采用原始的前后端不分离开发，需要学习jsp语言。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;JSP简介&quot;&gt;&lt;a href=&quot;#JSP简介&quot; class=&quot;headerl
    
    </summary>
    
      <category term="服务端" scheme="https://fanerge.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
      <category term="jsp" scheme="https://fanerge.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-由函数构建函数</title>
    <link href="https://fanerge.github.io/2017/08/08/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-4/"/>
    <id>https://fanerge.github.io/2017/08/08/js函数式编程-读书笔记-4/</id>
    <published>2017-08-08T11:02:29.000Z</published>
    <updated>2017-08-13T03:08:39.760Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="由函数构建函数"><a href="#由函数构建函数" class="headerlink" title="由函数构建函数"></a>由函数构建函数</h3><h4 id="函数式组合的精华"><a href="#函数式组合的精华" class="headerlink" title="函数式组合的精华"></a>函数式组合的精华</h4><pre><code>函数组合的精华：使用现有的零部件来建立新的行为，这些新行为同样也成为了已有的零部件。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">function dispatch() &#123;</div><div class="line">	let funs = _.toArray(arguments);</div><div class="line">	let size = funs.length;</div><div class="line">	return function (target) &#123;</div><div class="line">		let ret = undefined;</div><div class="line">		let args = _.rest(arguments);</div><div class="line">		for(let funIndex = 0; funIndex &lt; size; funIndex++)&#123;</div><div class="line">			let fun = funs[funIndex];</div><div class="line">			ret = fun.apply(fun, construct(target, args));</div><div class="line">			if (existy(ret)) return ret;	</div><div class="line">		&#125;</div><div class="line">		return ret;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let str = dispatch(invoker(&apos;toString&apos;, Array.prototype.toString),</div><div class="line">	invoker(&apos;toString&apos;, String.prototype.toString)</div><div class="line">	)</div><div class="line">let dd = str(&apos;a&apos;);</div><div class="line"></div><div class="line">console.log(dd) // &apos;a&apos;</div></pre></td></tr></table></figure>
</code></pre><h4 id="柯里化（Currying）"><a href="#柯里化（Currying）" class="headerlink" title="柯里化（Currying）"></a>柯里化（Currying）</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function rightAwayInvoker() &#123;</div><div class="line">	let args = _.toArray(arguments);</div><div class="line">	let method = args.shift();</div><div class="line">	let target = args.shift();</div><div class="line">	return method.apply(target, args);</div><div class="line">&#125;</div><div class="line">let dd = rightAwayInvoker(Array.prototype.reverse, [1, 2, 3]);</div><div class="line">console.log(dd) // [3, 2, 1]</div></pre></td></tr></table></figure>

柯里化的方向（默认向右）
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">function rigthCurryDiv(d) &#123;</div><div class="line">	return function (n) &#123;</div><div class="line">		return n/d;</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let divideBy10 = rigthCurryDiv(10); // 被除数</div><div class="line">let dd = divideBy10(2); // 除数</div><div class="line">var d1 = rigthCurryDiv(10)(2)</div><div class="line">console.log(d1); // 0.2</div><div class="line"></div><div class="line">// 柯里化一个参数</div><div class="line">function curry(fun) &#123;</div><div class="line">	return function(arg) &#123;</div><div class="line">		return fun(arg);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let dd = [&apos;11&apos;, &apos;11&apos;, &apos;11&apos; ,&apos;11&apos;].map(curry(parseInt))</div><div class="line">console.log(dd) // [&apos;11&apos;, &apos;11&apos;, &apos;11&apos; ,&apos;11&apos;]</div><div class="line"></div><div class="line">// 柯里化两个参数</div><div class="line">function curry2(fun) &#123;</div><div class="line">	return function(secondArg) &#123;</div><div class="line">		return function(firstArg) &#123;</div><div class="line">			return fun(firstArg, secondArg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">function div(n, d) &#123;</div><div class="line">	return n / d;</div><div class="line">&#125;</div><div class="line">let dd = curry2(div)(10)(50);</div><div class="line">console.log(dd) // 5</div><div class="line"></div><div class="line">function toHex(n) &#123;</div><div class="line">	let hex = n.toString(16);</div><div class="line">	return (hex.length &lt; 2) ? [0, hex].join(&apos;&apos;) : hex;</div><div class="line">&#125;</div><div class="line">function rgbToHexString(r, g, b) &#123;</div><div class="line">	return [&apos;#&apos;, toHex(r), toHex(g), toHex(b)].join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line">let dd = rgbToHexString(255, 255, 255);</div><div class="line">console.log(dd) // #ffffff</div></pre></td></tr></table></figure>
</code></pre><h4 id="部分应用"><a href="#部分应用" class="headerlink" title="部分应用"></a>部分应用</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function partial (fun) &#123;</div><div class="line">	let pargs = _.rest(arguments);</div><div class="line">	return function () &#123;</div><div class="line">		let args = cat(pargs, _.toArray(arguments));</div><div class="line">		return fun.apply(fun, args);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">var div10by2by4by5000partial = partial(div, 10, 2, 4, 5000);</div><div class="line">console.log(div10by2by4by5000partial()) // 5</div><div class="line"></div><div class="line">// 局部应用实战：前置条件</div><div class="line">function condition1() &#123;</div><div class="line">	let validators = _.toArray(arguments);</div><div class="line">	return function (fun, arg) &#123;</div><div class="line">		let errors = mapcat(function(isValid)&#123;</div><div class="line">			return isValid(arg) ? [] : [isValid.message];</div><div class="line">		&#125;, validators);</div><div class="line">		if (!_.isEmpty(errors)) &#123;</div><div class="line">			throw new Error(error.join(&apos;,&apos;));</div><div class="line">		&#125;</div><div class="line">		return fun(arg);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let sqrPre = condition1(validator(&apos;arg must not be zero&apos;, complement(zero)),</div><div class="line">	validator(&apos;arg must be a number&apos;, _.isNumber));</div><div class="line">let dd = sqrPre(_.identity, 10);</div><div class="line">console.log(dd)</div></pre></td></tr></table></figure>
</code></pre><h4 id="通过组合端至端的拼接函数"><a href="#通过组合端至端的拼接函数" class="headerlink" title="通过组合端至端的拼接函数"></a>通过组合端至端的拼接函数</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let isntString = _.compose(function (x) &#123; return !x; &#125;, _.isString);</div><div class="line">let dd = isntString([]);</div><div class="line">console.log(dd)	// true</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>   源代码仓库<br>    <a href="https://github.com/fanerge/Functional-reading-notes" target="_blank" rel="external">函数式编程-读书笔记</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;由函数构建函数&quot;&gt;&lt;a href=&quot;#由函数构建函数&quot; clas
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-高阶函数</title>
    <link href="https://fanerge.github.io/2017/08/03/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-3/"/>
    <id>https://fanerge.github.io/2017/08/03/js函数式编程-读书笔记-3/</id>
    <published>2017-08-03T12:01:15.000Z</published>
    <updated>2017-08-13T03:08:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="以其他函数为参数的函数"><a href="#以其他函数为参数的函数" class="headerlink" title="以其他函数为参数的函数"></a>以其他函数为参数的函数</h4><pre><code>如：_.map、_.reduce、_.filter等函数
关于传递函数的思考：max、finder、best
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">*max 集合中选择最大值的项*</div><div class="line">var dd = _.max([1, 2, 3, 4, 5])</div><div class="line">console.log(dd) // 5</div><div class="line">var people = [&#123;name: &apos;fed&apos;, age: 45&#125;, &#123;name: &apos;fan&apos;, age: 25&#125;];</div><div class="line">var dd = _.max(people, function (item) &#123;</div><div class="line">	return item.age;</div><div class="line">&#125;);</div><div class="line">console.log(dd) // &#123;name: &quot;fed&quot;, age: 45&#125;</div><div class="line"></div><div class="line">*finder *</div><div class="line">function finder(valueFun, bestFun, coll) &#123;</div><div class="line">	return _.reduce(coll, function (best, current) &#123;</div><div class="line">		var bestValue = valueFun(best);</div><div class="line">		var currentValue = valueFun(current);</div><div class="line">		return (bestValue === bestFun(bestValue, currentValue)) ? best : current; </div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">var dd = finder(_.identity, Math.max, [1, 2, 3, 4, 5]);</div><div class="line">console.log(dd) // 5</div><div class="line"></div><div class="line">*best *</div><div class="line">function best(fun, coll)&#123;</div><div class="line">	return _.reduce(coll, function (x, y) &#123;</div><div class="line">		return fun(x, y) ? x : y;	</div><div class="line">	&#125;);	</div><div class="line">&#125;</div><div class="line">var dd = best(function (x, y) &#123;</div><div class="line">	return x &gt; y;</div><div class="line">&#125;, [1, 2, 3, 4]);</div><div class="line">console.log(dd)// 4</div></pre></td></tr></table></figure>

关于传递函数的更多思考：重复、反复和条件迭代
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">function repeat(times, VALUE) &#123;</div><div class="line">	return _.map(_.range(times), function () &#123; return VALUE; &#125;)</div><div class="line">&#125;</div><div class="line">var dd = repeat(4, &apos;Major&apos;);</div><div class="line">console.log(dd) // [&apos;Major&apos;,&apos;Major&apos;,&apos;Major&apos;,&apos;Major&apos;]</div><div class="line"></div><div class="line">// 使用函数，而不是值</div><div class="line">function repeatedly(times, fun) &#123;</div><div class="line">	return _.map(_.range(times), fun);</div><div class="line">&#125;</div><div class="line">var dd = repeatedly(4, function () &#123;</div><div class="line">	return Math.floor((Math.random()*10) + 1)</div><div class="line">&#125;);</div><div class="line">console.log(dd)</div><div class="line"></div><div class="line">// 再次强调，&quot;使用函数，而不是值&quot;</div><div class="line">function iterateUntil(fun, check, init) &#123;</div><div class="line">	let ret = [];</div><div class="line">	let result = fun(init);</div><div class="line"></div><div class="line">	while (check(result))&#123;</div><div class="line">		ret.push(result);</div><div class="line">		result = fun(result);</div><div class="line">	&#125;</div><div class="line">	return ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let dd = iterateUntil(function (n)&#123; return n+n&#125;, function (n) &#123; return n &lt;= 1024&#125;, 1)</div><div class="line">console.log(dd) // [2, 4, 8, 16, ...]</div></pre></td></tr></table></figure>
</code></pre><h4 id="返回其他函数的函数"><a href="#返回其他函数的函数" class="headerlink" title="返回其他函数的函数"></a>返回其他函数的函数</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function always(VALUE)&#123;</div><div class="line">	return function ()&#123;</div><div class="line">		return VALUE;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var f = always(function () &#123;&#125;)</div><div class="line">var g = always(function () &#123;&#125;)</div><div class="line">console.log(f() === g()) // false</div><div class="line"></div><div class="line">function invoker(NAME, METHOD)&#123;</div><div class="line">	return function(target)&#123;</div><div class="line">		if (!existy(target)) fail(&quot;Must provide a target&quot;);</div><div class="line">		let targetMethod = target[NAME];</div><div class="line">		let args = _.rest(arguments);</div><div class="line">		return doWhen((existy(targetMethod) &amp;&amp; METHOD === targetMethod), function () &#123;</div><div class="line">			return targetMethod.apply(target, args);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">let rev = invoker(&apos;reverse&apos;, Array.prototype.reverse);</div><div class="line">console.log(_.map([[1, 2, 3]], rev))</div><div class="line"></div><div class="line">// 捕获增量值</div><div class="line">function makeUniqueStringFunction(start) &#123;</div><div class="line">	let COUNTER = start;</div><div class="line">	return function(prefix) &#123;</div><div class="line">		return [prefix, COUNTER++].join(&apos;&apos;);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let dd = makeUniqueStringFunction(0);</div><div class="line">let d1 = dd(&apos;fanerge&apos;)</div><div class="line">let d2 = dd(&apos;fanerge&apos;)</div><div class="line">console.log(d1, d2); // fanerge0 fanerge1</div></pre></td></tr></table></figure>
</code></pre><h4 id="整合：对象校验器"><a href="#整合：对象校验器" class="headerlink" title="整合：对象校验器"></a>整合：对象校验器</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function aMap(obj) &#123;</div><div class="line">	return _.isObject(obj);</div><div class="line">&#125;</div><div class="line">function hasKeys() &#123;</div><div class="line">	let KEYS = _.toArray(arguments);</div><div class="line">	let fun = function(obj)&#123;</div><div class="line">		return _.every(KEYS, function (k)&#123;</div><div class="line">			return _.has(obj, k);</div><div class="line">		&#125;)</div><div class="line">	&#125;;</div><div class="line">	fun.message = cat([&apos;Must have values for keys:&apos;], KEYS).join(&quot; &quot;);</div><div class="line">	return fun;</div><div class="line">&#125;</div><div class="line">let checkCommand = checker(validator(&quot;Must be a map&quot;, aMap), hasKeys(&apos;msg&apos;, &apos;type&apos;));</div><div class="line">console.log(checkCommand(&#123;msg: &apos;blah&apos;, type: &apos;display&apos;&#125;)); //[]</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>   源代码仓库<br>    <a href="https://github.com/fanerge/Functional-reading-notes" target="_blank" rel="external">函数式编程-读书笔记</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;hea
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程</title>
    <link href="https://fanerge.github.io/2017/08/03/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://fanerge.github.io/2017/08/03/js函数式编程/</id>
    <published>2017-08-03T12:00:21.000Z</published>
    <updated>2017-08-03T12:00:21.958Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js函数式编程-变量的作用域和闭包</title>
    <link href="https://fanerge.github.io/2017/07/30/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2/"/>
    <id>https://fanerge.github.io/2017/07/30/js函数式编程-读书笔记-2/</id>
    <published>2017-07-30T02:42:20.000Z</published>
    <updated>2017-08-13T03:08:23.997Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="变量的作用域和闭包"><a href="#变量的作用域和闭包" class="headerlink" title="变量的作用域和闭包"></a>变量的作用域和闭包</h3><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><pre><code>动态作用域 -- this（函数调用时确定的）
静态作用域（词法作用域）-- 函数声明时确定的
</code></pre><h4 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h4><pre><code>定义：所谓的词法作用域其实是指作用域在词法解析阶段既确定了,不会改变。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var aVariable = &apos;outer&apos;;</div><div class="line">function afunc()&#123;</div><div class="line">	let aVariable = &apos;middle&apos;;</div><div class="line">	return _.map([1, 2, 3], function (e)&#123;</div><div class="line">		let aVariable = &apos;in&apos;; // 使用最内层的aVariable</div><div class="line">		return [aVariable,e].join(&apos; &apos;);</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">console.log(afunc()) // [&quot;in 1&quot;, &quot;in 2&quot;, &quot;in 3&quot;]</div></pre></td></tr></table></figure>
</code></pre><h4 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var globals = &#123;&#125;;</div><div class="line">function makeBindFun(resolver)&#123;</div><div class="line">	return function(k, v)&#123;</div><div class="line">		let stack = globals[k] || [];</div><div class="line">		globals[k] = resolver(stack, v);</div><div class="line">		return globals;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var stackBinder = makeBindFun(function(stack, v)&#123;</div><div class="line">	stack.push(v);</div><div class="line">	return stack;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var stackUnBinder = makeBindFun(function(stack, v)&#123;</div><div class="line">	stack.pop(v);</div><div class="line">	return stack;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var dd = stackBinder(&apos;sd&apos;, &apos;dd&apos;)</div><div class="line">console.log(dd) //&#123;sd: [&apos;dd&apos;]&#125;</div></pre></td></tr></table></figure>


javascript的动态作用域（对this引用的讨论）
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">*bind* 锁定this使其不被更改</div><div class="line">function globalThis() &#123;</div><div class="line">	return this;</div><div class="line">&#125;</div><div class="line">var nopeThis = _.bind(globalThis, &apos;nope&apos;);</div><div class="line">nopeThis.call(&apos;wat&apos;) // &apos;nope&apos;;</div><div class="line"></div><div class="line">*bindAll* 锁定this引用到对应的命名函数</div><div class="line">var target = &#123;</div><div class="line">	name: &apos;the right value&apos;,</div><div class="line">	aux: function () &#123;</div><div class="line">		return this.name;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var dd = _.bindAll(target, &apos;aux&apos;)</div><div class="line">console.log(target.aux.call(&apos;wat&apos;)) // the right value</div></pre></td></tr></table></figure>
</code></pre><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*clone* 克隆一个对象</div><div class="line">function f()&#123;</div><div class="line">	this[&apos;a&apos;] = 200;</div><div class="line">	return this[&apos;a&apos;] + this[&apos;b&apos;];</div><div class="line">&#125;</div><div class="line">var globals = &#123;&apos;b&apos;: 2&#125;;</div><div class="line">var dd = f.call(_.clone(globals))</div><div class="line">console.log(dd) // 202</div></pre></td></tr></table></figure>
</code></pre><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><pre><code>模拟闭包
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function whatWasTheLocal() &#123;</div><div class="line">	let CAPTURED = &quot;Oh hai&quot;;</div><div class="line">	return function () &#123;</div><div class="line">		return &quot;The local was:&quot; + CAPTURED;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var dd = whatWasTheLocal();</div><div class="line">console.log(dd()) // The local was:Oh hai</div><div class="line"></div><div class="line">function createWeirdScaleFunction(FACTOR) &#123;</div><div class="line">	return function (v) &#123;</div><div class="line">		this[&apos;FACTOR&apos;] = FACTOR;</div><div class="line">		let captures = this;</div><div class="line">		return _.map(v, _.bind(function (n) &#123;</div><div class="line">			return (n * this[&apos;FACTOR&apos;]);	</div><div class="line">		&#125;, captures));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let scale10 = createWeirdScaleFunction(10);</div><div class="line">let dd = scale10.call(&#123;&#125;, [3, 4, 5])</div><div class="line">console.log(dd)</div></pre></td></tr></table></figure>

遮蔽
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var shadowed = 220;</div><div class="line">function argShadow(shadowed) &#123;</div><div class="line">	return [&apos;value is&apos;, shadowed].join();</div><div class="line">&#125;</div><div class="line"></div><div class="line">var dd = argShadow()</div><div class="line">console.log(dd)</div></pre></td></tr></table></figure>

使用闭包
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">let pingpong = (function () &#123;</div><div class="line">	let PRIVATE = 0;</div><div class="line">	return &#123;</div><div class="line">		inc: function (n) &#123;</div><div class="line">			return PRIVATE += n;</div><div class="line">		&#125;,</div><div class="line">		dec: function (n) &#123;</div><div class="line">			return PRIVATE -= n;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">let dd = pingpong.inc(10);</div><div class="line">console.log(dd) // 10</div></pre></td></tr></table></figure>

闭包的抽象
```
function plucker (FIELD) {
    return function (obj) {
        return (obj &amp;&amp; obj[FIELD])
    }
}
let best = {title: &apos;infinite jest&apos;, author: &apos;dfw&apos;}
let getTitle = plucker(&apos;title&apos;)
let dd = getTitle(best);
console.log(dd) // infinite jest
```    
</code></pre><blockquote>
<p>   源代码仓库<br>    <a href="https://github.com/fanerge/Functional-reading-notes" target="_blank" rel="external">函数式编程-读书笔记</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;变量的作用域和闭包&quot;&gt;&lt;a href=&quot;#变量的作用域和闭包&quot; 
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-一等函数与Applicative编程</title>
    <link href="https://fanerge.github.io/2017/07/27/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://fanerge.github.io/2017/07/27/js函数式编程-读书笔记-1/</id>
    <published>2017-07-27T13:02:47.000Z</published>
    <updated>2017-08-13T03:08:15.876Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="一等函数与Applicative编程"><a href="#一等函数与Applicative编程" class="headerlink" title="一等函数与Applicative编程"></a>一等函数与Applicative编程</h3><h4 id="函数式一等公民"><a href="#函数式一等公民" class="headerlink" title="函数式一等公民"></a>函数式一等公民</h4><pre><code>函数式编程语言应该是促进创造和使用函数的。
函数式一等公民：函数可以作为数组的成员、对象的方法、存储为变量等等。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 例如存储为数组的成员</div><div class="line">var fortytwos = [42, function () &#123; return 42 &#125;]</div></pre></td></tr></table></figure>

高阶函数的定义：以函数作为参数或者返回函数。
多种javascript编程方式
    命令式编程 -- 通过详细描述行为的编程方式。
    基于原型的面向对象编程 -- 基于原型对象及其实例的编程方式。
    元编程 -- 对JavaScript执行模型数据进行编写和操作的编程方式。    
</code></pre><h3 id="Applicative编程"><a href="#Applicative编程" class="headerlink" title="Applicative编程"></a>Applicative编程</h3><pre><code>定义：函数A作为参数提供给函数B。    
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">var nums = [1, 2, 3, 4, 5];</div><div class="line"></div><div class="line">*map* 遍历集合并对其每一个值调用一个函数，返回结果的集合。</div><div class="line">function doubleAll(array) &#123;</div><div class="line">	return _.map(array, function (n) &#123;</div><div class="line">		return n*2;	</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">console.log(doubleAll(nums)) // [2, 4, 6, 8, 10]</div><div class="line"></div><div class="line">*reduce* 利用函数将值的集合合并成一个值，该函数接收一个累积值和本次处理的值</div><div class="line">function average (array) &#123;</div><div class="line">	let sum = _.reduce(array, function (a, b)&#123;</div><div class="line">		return a + b;</div><div class="line">	&#125;)</div><div class="line">	return sum / array.length;</div><div class="line">&#125;</div><div class="line">console.log(average(nums)) // 3</div><div class="line"></div><div class="line">*filter* 对集合每一个值调用函数，若返回为true并添加到新集合中去，并返回新集合</div><div class="line">function onlyEven(array) &#123;</div><div class="line">	return _.filter(array, function (n)&#123;</div><div class="line">		return n%2 === 0	</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line">console.log(onlyEven(nums))</div><div class="line"></div><div class="line">集合中心编程</div><div class="line">var test = _.map(&#123;a: 1, b: 2&#125;, function (v, k) &#123;</div><div class="line">	return [k, v];</div><div class="line">&#125;)</div><div class="line">console.dir(test) // [[&apos;a&apos;, 1], [&apos;b&apos;, 2]]</div><div class="line"></div><div class="line">Applicative编程的其他实例</div><div class="line"></div><div class="line">*reduceRight*（从右到左）</div><div class="line">var nums = [100, 2, 25];</div><div class="line">function div(x, y) &#123;</div><div class="line">	return x/y;</div><div class="line">&#125;</div><div class="line">var test = _.reduceRight(nums, div);</div><div class="line">console.log(test) // 0.125</div><div class="line"></div><div class="line">*find* 它接收一个集合和一个谓词函数，并返回该谓词为true时的第一个元素。</div><div class="line">// 其中谓词函数为：_.isEqual、_.isEmpty、_.isElement...</div><div class="line">var dd = _.find([&apos;a&apos;, &apos;b&apos;, &apos;3&apos;, 4], _.isNumber);</div><div class="line">console.log(dd) // 4</div><div class="line"></div><div class="line">*reject* 本质为_.filter的逆命题</div><div class="line">var dd = _.reject([&apos;a&apos;, &apos;b&apos;, &apos;3&apos;, 4], _.isNumber);</div><div class="line">console.log(dd) // [&apos;a&apos;, &apos;b&apos;, &apos;3&apos;]</div><div class="line">// 另一种实现</div><div class="line">function complement(pred) &#123;</div><div class="line">	return function () &#123;</div><div class="line">		return !pred.apply(null, _.toArray(arguments));</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">var d1 = _.filter([&apos;a&apos;, &apos;b&apos;, &apos;3&apos;, 4], complement(_.isNumber))</div><div class="line">console.log(d1) // [&apos;a&apos;, &apos;b&apos;, &apos;3&apos;]</div><div class="line"></div><div class="line">*all* 当对于集合中所有元素都满足谓词时返回true，否则返回false</div><div class="line">var dd = _.all([1, 2, 3, &apos;4&apos;], _.isNumber)</div><div class="line">console.log(dd) // false</div><div class="line"></div><div class="line">*any* 当对于集合中有满足谓词时返回true，否则返回false</div><div class="line">var dd = _.any([1, 2, 3, &apos;4&apos;], _.isNumber)</div><div class="line">console.log(dd) // true</div><div class="line"></div><div class="line">*sortBy* 接收一个集合和函数来对该集合排序</div><div class="line">var people = [&#123;name: &apos;Rick&apos;, age: 30&#125;,&#123;name: &apos;Jaka&apos;, age: 24&#125;];</div><div class="line">var list = _.sortBy(people, function (p) &#123;</div><div class="line">	return p.name</div><div class="line">&#125;)</div><div class="line">console.log(list) // [&#123;name: &apos;Jaka&apos;, age: 24&#125;, &#123;name: &apos;Rick&apos;, age: 30&#125;]</div><div class="line"></div><div class="line">*groupBy* 接收一个集合和一个条件函数，并返回一个对象，k为传入的条件，v为对应的元素</div><div class="line">var albums = [</div><div class="line">	&#123;title: &apos;sabba&apos;, genre: &apos;metal&apos;&#125;,</div><div class="line">	&#123;title: &apos;scientist&apos;, genre: &apos;dub&apos;&#125;,</div><div class="line">	&#123;title: &apos;undertow&apos;, genre: &apos;metal&apos;&#125;,</div><div class="line">]</div><div class="line">var list = _.groupBy(albums, function (a) &#123;</div><div class="line">	return a.genre;</div><div class="line">&#125;)</div><div class="line">console.dir(list)</div><div class="line"></div><div class="line">*countBy* 接收一个集合和一个条件函数，并返回一个对象，k为传入的条件，v为对应的元素的个数</div><div class="line">var albums = [</div><div class="line">	&#123;title: &apos;sabba&apos;, genre: &apos;metal&apos;&#125;,</div><div class="line">	&#123;title: &apos;scientist&apos;, genre: &apos;dub&apos;&#125;,</div><div class="line">	&#123;title: &apos;undertow&apos;, genre: &apos;metal&apos;&#125;,</div><div class="line">]</div><div class="line">var list = _.countBy(albums, function (a) &#123;</div><div class="line">	return a.genre;</div><div class="line">&#125;)</div><div class="line">console.dir(list) // &#123;metal: 2, dub: 1&#125;</div></pre></td></tr></table></figure>


定义几个Applicative函数
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">*cat* 合并数组</div><div class="line">function cat() &#123;</div><div class="line">	let head = _.first(arguments);</div><div class="line">	if (existy(head)) &#123;</div><div class="line">		return head.concat.apply(head, _.rest(arguments));</div><div class="line">	&#125; else &#123;</div><div class="line">		return [];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">cat([1, 2, 3], [4, 5]) // [1, 2, 3, 4, 5]</div><div class="line"></div><div class="line">*construct* 将元素放置在数组前方</div><div class="line">function construct(head, tail) &#123;</div><div class="line">	return cat([head], _.toArray(tail));</div><div class="line">&#125;</div><div class="line">construct(42, [1, 2, 3]) // [42, 1, 2, 3]</div></pre></td></tr></table></figure>
</code></pre><h3 id="数据思考"><a href="#数据思考" class="headerlink" title="数据思考"></a>数据思考</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">*keys* 以数组的形式返回对象的key</div><div class="line">var zombie = &#123;name: &apos;bub&apos;, film: &apos;day&apos;&#125;</div><div class="line">console.log(_.keys(zombie)) // [&apos;name&apos;, &apos;film&apos;]</div><div class="line">*values* 以数组的形式返回对象的value</div><div class="line">console.log(_.keys(zombie)) // [&apos;bub&apos;, &apos;day&apos;]</div><div class="line"></div><div class="line">*pluck* 接收一个对象数组和一个字符串，并返回在给定的键数组中对应对象的值</div><div class="line">var authorList = _.pluck([</div><div class="line">	&#123;title: &apos;chthon&apos;, author: &apos;anthony&apos;&#125;,</div><div class="line">	&#123;title: &apos;grendel&apos;, author: &apos;grendel&apos;&#125;,</div><div class="line">	&#123;title: &apos;after&apos;&#125;</div><div class="line">], &apos;author&apos;);</div><div class="line"></div><div class="line">*pairs* 接收一个对象，并把它变成这个嵌套数组</div><div class="line">var demo = _.pairs(&#123;title: &apos;chthon&apos;, author: &apos;anthony&apos;&#125;)</div><div class="line">console.log(demo) // [[&apos;title&apos;, &apos;chthon&apos;],[&apos;author&apos;, &apos;anthony&apos;]]</div><div class="line"></div><div class="line">*object* 将其重新组合成一个新的对象</div><div class="line">var zombie = &#123;name: &apos;bub&apos;, film: &apos;day&apos;&#125;</div><div class="line">var dd = _.object(_.map(_.pairs(zombie), function (pair) &#123;</div><div class="line">	return [pair[0].toUpperCase(), pair[1]]</div><div class="line">&#125;))</div><div class="line">console.log(dd)	// &#123;NAME: &quot;bub&quot;, FILM: &quot;day&quot;&#125;</div><div class="line"></div><div class="line">*invert* 翻转key和value</div><div class="line">var zombie = &#123;name: &apos;bub&apos;, film: &apos;day&apos;&#125;</div><div class="line">var dd = _.invert(zombie);</div><div class="line">console.log(dd) // &#123;bub: &quot;name&quot;, day: &quot;film&quot;&#125;</div><div class="line"></div><div class="line">*defaults* 用于扩充传入的对象，如为某个属性添加默认值</div><div class="line">var dd = _.pluck(_.map([</div><div class="line">		&#123;title: &apos;chthon&apos;, author: &apos;anthony&apos;&#125;,</div><div class="line">		&#123;title: &apos;grendel&apos;, author: &apos;gardner&apos;&#125;,</div><div class="line">		&#123;title: &apos;after&apos;&#125;,</div><div class="line">	], function (obj) &#123;</div><div class="line">		return _.defaults(obj, &#123;author: &apos;Unknown&apos;&#125;)</div><div class="line">	&#125;),</div><div class="line">&apos;author&apos;);</div><div class="line">console.log(dd)	// [&quot;anthony&quot;, &quot;gardner&quot;, &quot;Unknown&quot;]</div><div class="line"></div><div class="line">*pick* 根据参数筛选对象</div><div class="line">*omit* 根据参数筛选对象</div><div class="line">var person = &#123;</div><div class="line">	name: &apos;romy&apos;,</div><div class="line">	token: &apos;j3900&apos;,</div><div class="line">	password: &apos;3333&apos;</div><div class="line">&#125;;</div><div class="line">var info = _.pick(person, &apos;token&apos;, &apos;password&apos;)</div><div class="line">var other = _.omit(person, &apos;token&apos;, &apos;password&apos;)</div><div class="line">console.log(info) // &#123;token: &quot;j3900&quot;, password: &quot;3333&quot;&#125;</div><div class="line">console.log(other) // &#123;name: &apos;romy&apos;&#125;</div><div class="line"></div><div class="line">*findWhere* 接收一个对象数组，返回第一个与参数给出的条件匹配的对象</div><div class="line">var library = [</div><div class="line">	&#123;title: &apos;sicp&apos;, isbn: &apos;0234&apos;, ed: 1&#125;,</div><div class="line">	&#123;title: &apos;sicp&apos;, isbn: &apos;0235&apos;, ed: 2&#125;,</div><div class="line">	&#123;title: &apos;joy&apos;, isbn: &apos;0236&apos;, ed: 1&#125;,</div><div class="line">];</div><div class="line">var dd = _.findWhere(library, &#123;title: &apos;sicp&apos;, ed: 2&#125;)</div><div class="line">console.log(dd) // &#123;title: &quot;sicp&quot;, isbn: &quot;0235&quot;, ed: 2&#125; 	</div><div class="line"></div><div class="line">*where* 接收一个对象数组，返回所有条件匹配的对象</div><div class="line">var library = [</div><div class="line">	&#123;title: &apos;sicp&apos;, isbn: &apos;0234&apos;, ed: 1&#125;,</div><div class="line">	&#123;title: &apos;sicp&apos;, isbn: &apos;0235&apos;, ed: 2&#125;,</div><div class="line">	&#123;title: &apos;joy&apos;, isbn: &apos;0236&apos;, ed: 1&#125;,</div><div class="line">];</div><div class="line">var dd = _.where(library, &#123;title: &apos;sicp&apos;&#125;)</div><div class="line">console.log(dd) // &#123;&#123;title: &apos;sicp&apos;, isbn: &apos;0234&apos;, ed: 1&#125;, &#123;title: &apos;sicp&apos;, isbn: &apos;0235&apos;, ed: 2&#125;&#125;</div></pre></td></tr></table></figure>


表状（Tabel-Like）数据    
```
function project(table, keys){
    return _.map(table, function (obj){
        return _.pick.apply(null, construct(obj, keys));
    });
}
var editionResults = project(library, [&apos;title&apos;, &apos;isbn&apos;])
// [
    {title: &apos;sicp&apos;, isbn: &apos;0234&apos;},
    {title: &apos;sicp&apos;, isbn: &apos;0235&apos;},
    {title: &apos;joy&apos;, isbn: &apos;0236&apos;},
]

*rename* 为对象属性设置别名
function rename(obj, newNames){
    return _.reduce(newNames, function(o, nu, old){
        if (_.has(obj, okd)) {
            o[nu] = obj[old];
            return o;
        } else {
            return o;
        }
    },
    _.omit.apply(null, construct(obj, _.keys(newNames))));
}
var dd = {a: 1, b: 2}
console.log(rename(dd, {&apos;a&apos;: &apos;A&apos;})) // {b: 2, A: 1}

*as* 类似于SQL语句 SELECT ed as edition FROM library
function as(table, newNames){
    return _.map(table, function(obj){
        return rename(obj, newNames);
    });
}
var library = [
        {title: &apos;sicp&apos;, isbn: &apos;0234&apos;, ed: 1},
        {title: &apos;sicp&apos;, isbn: &apos;0235&apos;, ed: 2},
        {title: &apos;joy&apos;, isbn: &apos;0236&apos;, ed: 1},
    ];
var dd = as(library, {ed: &apos;edition&apos;})
console.log(dd)
// [
        {title: &apos;sicp&apos;, isbn: &apos;0234&apos;, edition: 1},
        {title: &apos;sicp&apos;, isbn: &apos;0235&apos;, edition: 2},
        {title: &apos;joy&apos;, isbn: &apos;0236&apos;, edition: 1},
    ]

*where* 类似于SQL的where语句
//接收一个函数，作为对表中的每个对象的谓词。每当谓词返回false是，该对象不会出现在新表中
function restrict(table, pred){
    return _.reduce(table, function(newTable, obj){
        if (truthy(pred(obj))) {
            return newTable;
        } else {
            return _.without(newTable, obj)
        }
    }, table)
}

var dd = restrict(library, function (book){
    return book.ed &gt; 1;
})
console.log(dd) // [{title: &apos;sicp&apos;, isbn: &apos;0235&apos;, ed: 2}]
```    
</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>1. 一等函数    
    可以存储在变量中
    可以存储在数组中的插槽中
    可以存储在对象的字段中
    ...
2. applicative编程
    _.map
    _.reduce
    _.filter
</code></pre><blockquote>
<p>   源代码仓库<br>    <a href="https://github.com/fanerge/Functional-reading-notes" target="_blank" rel="external">函数式编程-读书笔记</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;一等函数与Applicative编程&quot;&gt;&lt;a href=&quot;#一等
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PWA-1</title>
    <link href="https://fanerge.github.io/2017/07/25/PWA-1/"/>
    <id>https://fanerge.github.io/2017/07/25/PWA-1/</id>
    <published>2017-07-25T14:35:26.000Z</published>
    <updated>2017-07-26T11:42:13.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lavas-–-基于-Vue-的-PWA-解决方案，帮助开发者快速搭建-PWA-应用，解决接入-PWA-的各种问题"><a href="#Lavas-–-基于-Vue-的-PWA-解决方案，帮助开发者快速搭建-PWA-应用，解决接入-PWA-的各种问题" class="headerlink" title="Lavas – 基于 Vue 的 PWA 解决方案，帮助开发者快速搭建 PWA 应用，解决接入 PWA 的各种问题"></a>Lavas – 基于 Vue 的 PWA 解决方案，帮助开发者快速搭建 PWA 应用，解决接入 PWA 的各种问题</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h3><ol>
<li>Lavas 介绍<br>Lavas 是什么？<pre><code>Lavas 是一个基于 Vue 的 PWA (Progressive Web Apps) 完整解决方案。
</code></pre>Lavas 做什么？<pre><code>站点 PWA 化需要做什么，Lavas 就做什么。
PWA (Progressive Web Apps) 是一种 Web App 新模型：
1.站点可添加至主屏幕
2.全屏方式运行
3.支持离线缓存
4.消息推送 ...
</code></pre></li>
<li>探索PWA<br>什么是PWA？<br>  PWA 工程的解决方案中借助了 service worker 的离线存储能力，消息推送能力以及系统的添加桌面能力，从而形成一个完善的 Web App 解决方案，帮助我们在 Web 端低成本的开发和维护一个逐步类 Native App 化的 Web App。<br>什么站点适合改造成 PWA？<br>  除了对系统强依赖的 App, 以及游戏类的 App 等, 所有的 Native App 都可以改造成 PWA 应用。<br>PWA 的效果？<br>  1.https 环境部署。<br>  2.响应式设计，一次部署，可以在移动设备和 PC 设备上运行。<br>  3.在不同浏览器下可正常访问。<br>  4.浏览器离线和弱网环境可极速访问。<br>  5.可以把 App Icon 入口添加到桌面。<br>  6.点击 Icon 入口有类似 Native App 的动画效果。<br>  7.灵活的热更新。<br>离线缓存<br>  HTML5 新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="external">service worker API</a>，提供的离线缓存能力<br>SPA (Single Page Apps)<br>基于 Vue 架构的 PWA 工程<br>App Shell<br>  App Shell 架构是构建 PWA 工程的一种方式，这种应用能可靠且即时地加载到您的用户屏幕上，与本地应用相似。</li>
<li>快速开始 PWA 工程<br>依赖工具<br>  $ npm install -g lavas<br>初始化工程<br>  $ lavas init<br>运行<br>  cd projectName<br>  npm install<br>  npm run dev</li>
<li><p>开发一个页面（以NotFound页面为例）<br>添加路由    </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const NotFound = () =&gt; import(&apos;@/pages/NotFound.vue&apos;);</div><div class="line"></div><div class="line">routes: [</div><div class="line">	// 省略其他路由对象</div><div class="line">	&#123;</div><div class="line">		path: &apos;*&apos;,</div><div class="line">		name: &apos;notFound&apos;,</div><div class="line">		component: NotFound</div><div class="line">	&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>页面组织结构<br>  标准.vue单文件<br>与app shell 的交互<br>  vuex<br>监听全局事件    </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import EventBus from &apos;@/event-bus&apos;;</div><div class="line"></div><div class="line">// 在 activated 钩子中注册</div><div class="line">EventBus.$on(`app-header:click-action`, (&#123;actionIdx&#125;) =&gt; &#123;</div><div class="line">	// 处理点击按钮事件</div><div class="line">	// ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>组件开发<br>  <a href="https://vuetifyjs.com/" target="_blank" rel="external">vuetify</a><br>异步请求数据<br>   <a href="">axios</a></p>
</li>
<li>调试工程<br>webpack dev-server<br>chrome 调试    </li>
<li>构建部署工程<br>生产环境构建<br>部署到服务器</li>
</ol>
<h3 id="进阶教程"><a href="#进阶教程" class="headerlink" title="进阶教程"></a>进阶教程</h3><ol>
<li>维护 service-worker.js 文件<br>service-worker.js<br>  service-worker.js 文件作为缓存管理的重要文件<br>如何配置缓存内容<br>  通过 config/sw-precache.js 文件进行缓存配置，根据配置为用户缓存网站静态与动态资源，并截获用户的所有网络请求，决定是从缓存还是网络获取相应资源，限制缓存大小等。</li>
<li>Service Worker 与页面通信<br>如何使用 postMessage 方法发送信息<br>  在 sw.js 中向接管页面发信息，可以采用 client.postMessage() 方法<br>  在主页面给 Service Worker 发消息，可以采用 navigator.serviceWorker.controller.postMessage() 方法<br>如何接收 postMessage 发送的信息<br>  在 sw.js 中接收主页面发来的信息，示例代码如下，通过 event.data 来读取数据<br>  在页面中接收 sw.js 发来的信息，示例代码如下，通过 event.data 来读取数据</li>
<li>App Shell 调整及扩展<br>App Shell 模型<br>调整及扩展 App Shell<br>  状态管理<br>  与路由组件通信<br>  扩展 Shell</li>
<li>App Skeleton 介绍<br>Lavas 的 Skeleton 支持<br>默认 Skeleton</li>
<li>页面切换动画效果<br>具体实现</li>
<li>修改项目主题<br>配置文件<br>  主题相关的配置文件在 config/theme.js 中<br>  使用预定义的颜色变量<br>  使用主题变量</li>
<li>在项目中使用图标<br>字体文件<br>自定义 SVG</li>
<li>使用 Material Design UI 开发<br>muse-ui、vue-material、vuetify</li>
<li>HTTPS 环境部署</li>
<li>服务器端渲染</li>
</ol>
<p>参考：</p>
<blockquote>
<p><a href="https://lavas.baidu.com/" target="_blank" rel="external">lavas-百度PWA解决方案</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Lavas-–-基于-Vue-的-PWA-解决方案，帮助开发者快速搭建-PWA-应用，解决接入-PWA-的各种问题&quot;&gt;&lt;a href=&quot;#Lavas-–-基于-Vue-的-PWA-解决方案，帮助开发者快速搭建-PWA-应用，解决接入-PWA-的各种问题&quot; clas
    
    </summary>
    
      <category term="PWA" scheme="https://fanerge.github.io/categories/PWA/"/>
    
    
      <category term="有趣的" scheme="https://fanerge.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-javascript函数式编程的简介</title>
    <link href="https://fanerge.github.io/2017/07/25/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://fanerge.github.io/2017/07/25/js函数式编程-读书笔记/</id>
    <published>2017-07-25T13:11:13.000Z</published>
    <updated>2017-07-27T13:08:54.023Z</updated>
    
    <content type="html"><![CDATA[<p>最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸<strong>函数式编程</strong>。<br><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="javascript函数式编程的简介"><a href="#javascript函数式编程的简介" class="headerlink" title="javascript函数式编程的简介"></a>javascript函数式编程的简介</h3><h4 id="javascript案列"><a href="#javascript案列" class="headerlink" title="javascript案列"></a>javascript案列</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">javascript函数式编程初试</div><div class="line">function splt (fn)　&#123;</div><div class="line">	return function (array) &#123;</div><div class="line">		return fn.apply(null, array)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">// example</div><div class="line">var addArrayElements = splt(function (x, y) &#123;</div><div class="line">	return x + y;</div><div class="line">&#125;)</div><div class="line">console.log(addArrayElements([1,2])) // 3</div><div class="line"></div><div class="line">function unsplat (fun) &#123;</div><div class="line">	return function () &#123;</div><div class="line">		return fun.call(null, _.toArray(arguments))</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line">let joinElments = unsplat(function (array) &#123;</div><div class="line">	return array.join(&apos; &apos;)</div><div class="line">&#125;)</div><div class="line">// example</div><div class="line">console.log(joinElments(&apos;@&apos;, &apos;$&apos;, &apos;*&apos;)) // @ $ *</div></pre></td></tr></table></figure>
</code></pre><h4 id="开始函数式编程"><a href="#开始函数式编程" class="headerlink" title="开始函数式编程"></a>开始函数式编程</h4><pre><code>直白的定义：函数式编程通过使用函数来将值转换成抽象单元，接着用于构建软件系统。
以函数为抽象单元
例子：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">function parseAge (age) &#123;</div><div class="line">	if (!_.isString(age)) &#123;</div><div class="line">		throw new Error(&apos;expecting a string&apos;);</div><div class="line">	&#125;</div><div class="line">	let a;</div><div class="line">	console.log(&apos;attempting to parse an age&apos;)</div><div class="line">	a = parseInt(age, 10);</div><div class="line">	if (_.isNaN(a)) &#123;</div><div class="line">		console.log([&quot;could not parse age:&quot;, age].join(&apos; &apos;));</div><div class="line">		a = 0;</div><div class="line">	&#125;</div><div class="line">	return a;</div><div class="line">&#125;</div><div class="line">// example</div><div class="line">console.log(parseAge(34)) // throw Error</div><div class="line"></div><div class="line">// 如果我们想修改输出错误、信息和警告呈现的方式，较好的</div><div class="line">方式是将错误、信息和警告的概念抽象成不同的函数</div><div class="line">function fail(thing) &#123;</div><div class="line">	throw new Error(thing);</div><div class="line">&#125;</div><div class="line">function warn(thing) &#123;</div><div class="line">	console.log([&apos;WARNING:&apos;, thing].join(&apos; &apos;));</div><div class="line">&#125;</div><div class="line">function note(thing) &#123;</div><div class="line">	console.log([&apos;NOTE:&apos;, thing].join(&apos; &apos;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">function parseAge (age) &#123;</div><div class="line">	if (!_.isString(age)) &#123;</div><div class="line">		fail(&apos;Expecting a string&apos;);</div><div class="line">	&#125;</div><div class="line">	let a;</div><div class="line">	note(&apos;Attempting to parse an age&apos;)</div><div class="line">	a = parseInt(age, 10);</div><div class="line">	if (_.isNaN(a)) &#123;</div><div class="line">		warn([&apos;Could not parse age:&apos;, age].join(&apos; &apos;));</div><div class="line">		a = 0;</div><div class="line">	&#125;</div><div class="line">	return a;</div><div class="line">&#125;</div><div class="line">// example</div><div class="line">console.log(parseAge(&apos;df&apos;)) // throw Error</div></pre></td></tr></table></figure>

封装和隐藏（闭包）
以函数为行为单位
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function nativeNth(a, index) &#123;</div><div class="line">	return a[index];</div><div class="line">&#125;</div><div class="line">var letters = [&apos;a&apos;, &apos;b&apos;];</div><div class="line">// example</div><div class="line">console.log(nativeNth(letters, 0)) // a</div><div class="line"></div><div class="line">// </div><div class="line">function nth(a, index) &#123;</div><div class="line">	if (!_.isNumber(index)) &#123;</div><div class="line">		fail(&apos;Expected a number as the index&apos;);</div><div class="line">	&#125;</div><div class="line">	if (!isIndexed(a)) &#123;</div><div class="line">		fail(&apos;Not supported on non-indexed type&apos;);</div><div class="line">	&#125;</div><div class="line">	if ((index &lt; 0) || (index &gt; a.length -1)) &#123;</div><div class="line">		fail(&apos;Index value is out of bounds&apos;);</div><div class="line">	&#125;</div><div class="line">	return a[index];</div><div class="line">&#125;</div><div class="line"></div><div class="line">var letters = [&apos;1&apos;, &apos;2&apos;]</div><div class="line">console.log(nth(letters, 1))</div></pre></td></tr></table></figure>

数据抽象
    Javascript的对象原型模型是一个丰富且基础的数据方案。
函数式javascript初试
    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// existy 定义事物的存在（js中null和undefined表示不存在）</div><div class="line">function existy(x) &#123; return x != null &#125;</div><div class="line">// example</div><div class="line">existy(null) // false</div><div class="line"></div><div class="line">truthy 用来判断一个对象是否应该被认为是true的同义词</div><div class="line">// js的原始真类型</div><div class="line">function truthy(x) &#123;</div><div class="line">	return (x !== false) &amp;&amp; existy(x)</div><div class="line">&#125;</div><div class="line">console.log(truthy(&apos;&apos;)) // true</div></pre></td></tr></table></figure>
</code></pre><h4 id="Underscore示例"><a href="#Underscore示例" class="headerlink" title="Underscore示例"></a>Underscore示例</h4><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><pre><code>一种用于构建Javascript应用程序的技术称为“函数式编程”        
    1.确定抽象，并为其构建函数。
    2.利用已有的函数来构建更为复杂的抽象。
    3.通过将现有的函数传给其他的函数来构建更加复杂的抽象。
</code></pre><blockquote>
<p>   书籍【javascript函数式编程】</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，工作不是很忙，赶紧为自己充电。准备很长一段事件撸&lt;strong&gt;函数式编程&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;javascript函数式编程的简介&quot;&gt;&lt;a href=&quot;#ja
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="https://fanerge.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-6</title>
    <link href="https://fanerge.github.io/2017/07/24/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-6/"/>
    <id>https://fanerge.github.io/2017/07/24/js函数式编程-6/</id>
    <published>2017-07-24T13:25:38.000Z</published>
    <updated>2017-07-25T13:03:13.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Applicative-Functor"><a href="#Applicative-Functor" class="headerlink" title="Applicative Functor"></a>Applicative Functor</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="应用-applicative-functor"><a href="#应用-applicative-functor" class="headerlink" title="应用 applicative functor"></a>应用 applicative functor</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Container.of(2).chain(function(two) &#123;</div><div class="line">  return Container.of(3).map(add(two));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</code></pre><h3 id="瓶中之船"><a href="#瓶中之船" class="headerlink" title="瓶中之船"></a>瓶中之船</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// ap 就是这样一种函数，能够把一个 functor 的函数值应用到另一个 functor 的值上。</div><div class="line">Container.prototype.ap = function(other_container) &#123;</div><div class="line">  return other_container.map(this.__value);</div><div class="line">&#125;</div><div class="line">Container.of(add(2)).ap(Container.of(3)); // Container(5)</div><div class="line"></div><div class="line">// all together now</div><div class="line">Container.of(2).map(add).ap(Container.of(3)); // Container(5</div></pre></td></tr></table></figure>
</code></pre><h3 id="协调与激励"><a href="#协调与激励" class="headerlink" title="协调与激励"></a>协调与激励</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 帮助函数：</div><div class="line">//  $ :: String -&gt; IO DOM</div><div class="line">var $ = function(selector) &#123;</div><div class="line">  return new IO(function()&#123; return document.querySelector(selector) &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//  getVal :: String -&gt; IO String</div><div class="line">var getVal = compose(map(_.prop(&apos;value&apos;)), $);</div><div class="line"></div><div class="line">// Example:</div><div class="line">//  signIn :: String -&gt; String -&gt; Bool -&gt; User</div><div class="line">var signIn = curry(function(username, password, remember_me)&#123; /* signing in */  &#125;)</div><div class="line"></div><div class="line">IO.of(signIn).ap(getVal(&apos;#email&apos;)).ap(getVal(&apos;#password&apos;)).ap(IO.of(false));</div><div class="line">// IO(&#123;id: 3, email: &quot;gg@allin.com&quot;&#125;)</div></pre></td></tr></table></figure>
</code></pre><h3 id="定律"><a href="#定律" class="headerlink" title="定律"></a>定律</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">同一律（identity）</div><div class="line">	A.of(id).ap(v) == v</div><div class="line">	var v = Identity.of(&quot;Pillow Pets&quot;);</div><div class="line">	Identity.of(id).ap(v) == v</div><div class="line">同态（homomorphism）</div><div class="line">	A.of(f).ap(A.of(x)) == A.of(f(x))</div><div class="line">	Either.of(_.toUpper).ap(Either.of(&quot;oreos&quot;)) == Either.of(_.toUpper(&quot;oreos&quot;))</div><div class="line">互换（interchange）</div><div class="line">	v.ap(A.of(x)) == A.of(function(f) &#123; return f(x) &#125;).ap(v)</div><div class="line">	var v = Task.of(_.reverse);</div><div class="line">	var x = &apos;Sparklehorse&apos;;</div><div class="line">	v.ap(Task.of(x)) == Task.of(function(f) &#123; return f(x) &#125;).ap(v)</div><div class="line">组合（composition）</div><div class="line">	A.of(compose).ap(u).ap(v).ap(w) == u.ap(v.ap(w));</div><div class="line">	var u = IO.of(_.toUpper);</div><div class="line">	var v = IO.of(_.concat(&quot;&amp; beyond&quot;));</div><div class="line">	var w = IO.of(&quot;blood bath &quot;);</div><div class="line">	IO.of(_.compose).ap(u).ap(v).ap(w) == u.ap(v.ap(w))</div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#自由定理" target="_blank" rel="external">js函数式编程</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Applicative-Functor&quot;&gt;&lt;a href=&quot;#Applicative-Functor&quot; class=&quot;headerlink&quot; title=&quot;Applicative Functor&quot;&gt;&lt;/a&gt;Applicative Functor&lt;/h2&gt;&lt;p&gt;&lt;e
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-5</title>
    <link href="https://fanerge.github.io/2017/07/24/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-5/"/>
    <id>https://fanerge.github.io/2017/07/24/js函数式编程-5/</id>
    <published>2017-07-24T11:41:34.000Z</published>
    <updated>2017-07-24T13:10:54.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="pointed-functor"><a href="#pointed-functor" class="headerlink" title="pointed functor"></a>pointed functor</h3><pre><code>of 方法不是用来避免使用 new 关键字的，而是用来把值放到默认最小化上下文（default minimal context）中的。
</code></pre><blockquote>
<p>  pointed functor 是实现了 of 方法的 functor。</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这里的关键是把任意值丢到容器里然后开始到处使用 map 的能力。</div><div class="line">IO.of(&quot;tetris&quot;).map(concat(&quot; master&quot;)); // IO(&quot;tetris master&quot;)</div><div class="line">Maybe.of(1336).map(add(1)); // Maybe(1337)</div></pre></td></tr></table></figure>
</code></pre><h3 id="混合比喻"><a href="#混合比喻" class="headerlink" title="混合比喻"></a>混合比喻</h3><ol>
<li><p>例子</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">//  readFile :: String -&gt; IO String</div><div class="line">var readFile = function(filename) &#123;</div><div class="line">  return new IO(function() &#123;</div><div class="line">	return fs.readFileSync(filename, &apos;utf-8&apos;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//  print :: String -&gt; IO String</div><div class="line">var print = function(x) &#123;</div><div class="line">  return new IO(function() &#123;</div><div class="line">	console.log(x);</div><div class="line">	return x;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//  cat :: IO (IO String)</div><div class="line">var cat = compose(map(print), readFile);</div><div class="line"></div><div class="line">cat(&quot;.git/config&quot;)</div><div class="line">// IO(IO(&quot;[core]\nrepositoryformatversion = 0\n&quot;))</div></pre></td></tr></table></figure>
</li>
<li><p>剥开洋葱</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">我说过 monad 像洋葱，可以使用一个叫作 join 的方法，来剥开。</div><div class="line">var mmo = Maybe.of(Maybe.of(&quot;nunchucks&quot;));</div><div class="line">// Maybe(Maybe(&quot;nunchucks&quot;))</div><div class="line">mmo.join();</div><div class="line">// Maybe(&quot;nunchucks&quot;)</div><div class="line"></div><div class="line">var ttt = Task.of(Task.of(Task.of(&quot;sewers&quot;)));</div><div class="line">// Task(Task(Task(&quot;sewers&quot;)));</div><div class="line">ttt.join()</div><div class="line">// Task(Task(&quot;sewers&quot;))</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>   monad 是可以变扁（flatten）的 pointed functor。<br>    一个 functor，只要它定义个了一个 join 方法和一个 of 方法，并遵守一些定律，那么它就是一个 monad。</p>
</blockquote>
<pre><code>为Maybe实现join方法
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Maybe.prototype.join = function () &#123;</div><div class="line">	return this.isNothing() ? Maybe.of(null) : this.__value;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Example</div><div class="line">//  join :: Monad m =&gt; m (m a) -&gt; m a</div><div class="line">var join = function(mma)&#123; return mma.join(); &#125;</div><div class="line"></div><div class="line">//  firstAddressStreet :: User -&gt; Maybe Street</div><div class="line">var firstAddressStreet = compose(</div><div class="line">  join, map(safeProp(&apos;street&apos;)), join, map(safeHead), safeProp(&apos;addresses&apos;)</div><div class="line">);</div><div class="line"></div><div class="line">firstAddressStreet(</div><div class="line">  &#123;addresses: [&#123;street: &#123;name: &apos;Mulburry&apos;, number: 8402&#125;, postcode: &quot;WC2N&quot; &#125;]&#125;</div><div class="line">);</div><div class="line">// Maybe(&#123;name: &apos;Mulburry&apos;, number: 8402&#125;)</div></pre></td></tr></table></figure>
</code></pre><h3 id="chain-函数"><a href="#chain-函数" class="headerlink" title="chain 函数"></a>chain 函数</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 使用 chain封装（map的后面调用join）</div><div class="line">//  chain :: Monad m =&gt; (a -&gt; m b) -&gt; m a -&gt; m b</div><div class="line">var chain = curry(function(f, m)&#123;</div><div class="line">  return m.map(f).join(); // 或者 compose(join, map(f))(m)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// map/join</div><div class="line">var firstAddressStreet = compose(</div><div class="line">  join, map(safeProp(&apos;street&apos;)), join, map(safeHead), safeProp(&apos;addresses&apos;)</div><div class="line">);</div><div class="line"></div><div class="line">// chain</div><div class="line">var firstAddressStreet = compose(</div><div class="line">  chain(safeProp(&apos;street&apos;)), chain(safeHead), safeProp(&apos;addresses&apos;)</div><div class="line">);</div><div class="line"></div><div class="line">Example</div><div class="line">Maybe.of(3).chain(function(three) &#123;</div><div class="line">  return Maybe.of(2).map(add(three));</div><div class="line">&#125;);</div><div class="line">// Maybe(5);</div></pre></td></tr></table></figure>
</code></pre><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> // 结合律</div><div class="line">compose(join, map(join)) == compose(join, join)</div></pre></td></tr></table></figure>

总结：monad 能够借给我们从盒子中取出的值，而且知道我们会在结束使用后还给它。
monad 让我们深入到嵌套的运算当中，使我们能够在完全避免回调金字塔（pyramid of doom）情况下，为变量赋值，运行有序的作用，执行异步任务等等。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Monad&quot;&gt;&lt;a href=&quot;#Monad&quot; class=&quot;headerlink&quot; title=&quot;Monad&quot;&gt;&lt;/a&gt;Monad&lt;/h2&gt;&lt;p&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;pointed
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-4</title>
    <link href="https://fanerge.github.io/2017/07/22/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-4/"/>
    <id>https://fanerge.github.io/2017/07/22/js函数式编程-4/</id>
    <published>2017-07-22T13:15:25.000Z</published>
    <updated>2017-07-23T14:48:38.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特百惠"><a href="#特百惠" class="headerlink" title="特百惠"></a>特百惠</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="强大的容器"><a href="#强大的容器" class="headerlink" title="强大的容器"></a>强大的容器</h3><pre><code>函数式的程序：即通过管道把数据在一系列纯函数间传递的程序。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1.	// 先创建一个容器（container），这个容器必须能够装载任意类型的值，一个存放宝贵的数据的特殊盒子。</div><div class="line">	var Container = function (x) &#123;</div><div class="line">		this._value = x;</div><div class="line">	&#125;;	</div><div class="line">	// 作用容器的构造器（constructor）</div><div class="line">	Container.of = function (x) &#123;</div><div class="line">		return new Container(x);</div><div class="line">	&#125;;</div><div class="line">	// 测试容器</div><div class="line">	var test = Container.of(Container.of(&#123;name: &apos;fanerge&apos;&#125;))	</div><div class="line">	console.log(test)</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>第一个functor</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 操作容器中的值</div><div class="line">// (a -&gt; b) -&gt; Container a -&gt; Container b</div><div class="line">Container.prototype.map = function (f) &#123;</div><div class="line">	return Container.of(f(this._value))</div><div class="line">&#125;;	</div><div class="line">// 使用map方法</div><div class="line">Container.of(3).map(function (two) &#123;</div><div class="line">	return two + 2;</div><div class="line">&#125;);</div><div class="line">// Container(5)</div><div class="line">Container.of(&apos;fanerge&apos;).map(function (str) &#123; </div><div class="line">	return str.toUpperCase()</div><div class="line">&#125;);</div><div class="line">// Container(&apos;FANERGE&apos;)</div><div class="line">// 因为我们能够在不离开 Container 的情况下操作容器里面的值。这是非常了不起的一件事情。Container 里的值传递给 map 函数之后，就可以任我们操作；操作结束后，为了防止意外再把它放回它所属的 Container。这样做的结果是，我们能连续地调用 map，运行任何我们想运行的函数。</div></pre></td></tr></table></figure>
<p><strong>functor 是实现了 map 函数并遵守一些特定规则的容器类型。</strong><br>把值装进一个容器，而且只能使用 map 来处理它，让容器自己去运用函数能给我们带来什么好处？答案是抽象，对于函数运用的抽象。当 map 一个函数的时候，我们请求容器来运行这个函数。不夸张地讲，这是一种十分强大的理念。</p>
</li>
<li><p>薛定谔的Maybe</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var Maybe = function (x) &#123;</div><div class="line">	this._value = x;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Maybe.of = function (x) &#123;</div><div class="line">	return new Maybe(x);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Maybe.prototype.isNoting = function () &#123;</div><div class="line">	return (this._value == null || this._value === undefined)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Maybe.prototype.map = function (f) &#123;</div><div class="line">	return this.isNoting() ? Maybe.of(null) : Maybe.of(f(this._value));</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Maybe.of(&apos;Malkovich Malkovich&apos;).map(_.match(/a/ig)) // Maybe([&apos;a&apos;, &apos;a&apos;]</div><div class="line">// map 完全有能力以 curry 函数的方式来“代理”任何 functor</div><div class="line">var map = curry(function (f, any_functor_at_all) &#123;</div><div class="line">	return any_functor_at_all.map(f);</div><div class="line">&#125;);</div><div class="line">// safeHead :: [a] -&gt; Maybe(a)</div><div class="line">var safeHead = function (xs) &#123;</div><div class="line">	return Maybe.of(xs[0]);</div><div class="line">&#125;;</div><div class="line">var streetName = _.compose(map(_.prop(&apos;street&apos;)), safeHead, _.prop(&apos;address&apos;));</div><div class="line">streetName(&#123;addresses: [&#123;street: &quot;Shady Ln.&quot;, number: 4201&#125;]&#125;); // Maybe(&quot;Shady Ln.&quot;)</div></pre></td></tr></table></figure>
<p><em>购物的例子</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// withdraw :: Number -&gt; Account -&gt; Maybe(Account)</div><div class="line">var withdraw = curry(function (amount, account) &#123;</div><div class="line">	return account.balance &gt;= amount ?</div><div class="line">		Maybe.of(&#123;balance: acount.balance - amount&#125;) :</div><div class="line">		Maybe.of(null);</div><div class="line">&#125;)</div><div class="line">// finishTransaction :: Account -&gt; String</div><div class="line">var finishTransaction = compose(remainingBalance, updateLedger); //// &lt;- 假定这两个函数已经在别处定义好了</div><div class="line">// getTwenty :: Account -&gt; Maybe(String)</div><div class="line">var getTwenty = compose(map(finishTransaction), withdraw(20));</div><div class="line">getTwenty(&#123;balance: 200.00&#125;); // Maybe(&quot;Your balance is $180.00&quot;)</div><div class="line">getTwenty(&#123; balance: 10.00&#125;); // Maybe(null)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// maybe :: b -&gt; (a -&gt; b) -&gt; Maybe a -&gt; b	</div><div class="line">var may = curry(function (x, f, m) &#123;</div><div class="line">	return m.isNoting() ? x : f(m._value);</div><div class="line">&#125;);</div><div class="line">// getTwenty :: Account -&gt; String</div><div class="line">var getTwenty = compose(</div><div class="line">	maybe(&quot;You&apos;re broke!&quot;, finishTransaction), withdraw(20)</div><div class="line">);	</div><div class="line">getTwenty(&#123; balance: 200.00&#125;); // &quot;Your balance is $180.00&quot;</div><div class="line">getTwenty(&#123; balance: 10.00&#125;); // &quot;You&apos;re broke!&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="“纯”错误处理"><a href="#“纯”错误处理" class="headerlink" title="“纯”错误处理"></a>“纯”错误处理</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">Left 和 Right 是我们称之为 Either 的抽象类型的两个子类。</div><div class="line">var Left = function(x) &#123;</div><div class="line">  this.__value = x;</div><div class="line">&#125;</div><div class="line">Left.of = function(x) &#123;</div><div class="line">  return new Left(x);</div><div class="line">&#125;</div><div class="line">Left.prototype.map = function(f) &#123;</div><div class="line">  return this;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var Right = function(x) &#123;</div><div class="line">  this.__value = x;</div><div class="line">&#125;</div><div class="line">Right.of = function(x) &#123;</div><div class="line">  return new Right(x);</div><div class="line">&#125;</div><div class="line">Right.prototype.map = function(f) &#123;</div><div class="line">  return Right.of(f(this.__value));</div><div class="line">&#125;</div><div class="line">// 就像 Maybe 可以有个 maybe 一样，Either 也可以有一个 either。两者的用法类似，但 either 接受两个函数（而不是一个）和一个静态值为参数。</div><div class="line">//  either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c</div><div class="line">var either = curry(function(f, g, e) &#123;</div><div class="line">  switch(e.constructor) &#123;</div><div class="line">	case Left: return f(e.__value);</div><div class="line">	case Right: return g(e.__value);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//  zoltar :: User -&gt; _</div><div class="line">var zoltar = compose(console.log, either(id, fortune), getAge(moment()));</div><div class="line"></div><div class="line">zoltar(&#123;birthdate: &apos;2005-12-12&apos;&#125;);</div><div class="line">// &quot;If you survive, you will be 10&quot;</div><div class="line">// undefined</div><div class="line"></div><div class="line">zoltar(&#123;birthdate: &apos;balloons!&apos;&#125;);</div><div class="line">// &quot;Birth date could not be parsed&quot;</div><div class="line">// undefined</div></pre></td></tr></table></figure>

**取到容器里的东西**
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var IO = function (f) &#123;</div><div class="line">	this.__value = f;</div><div class="line">&#125;;</div><div class="line">IO.of = function (x) &#123;</div><div class="line">	return new IO(function () &#123;</div><div class="line">		return x;</div><div class="line">	&#125;);</div><div class="line">&#125;;</div><div class="line">IO.prototype.map = function (f) &#123;</div><div class="line">	return new IO(_.compose(f, this.__value));</div><div class="line">&#125;;</div><div class="line">// io_window_ :: IO Window</div><div class="line">var io_window = new IO(function () &#123; return window;&#125;)</div><div class="line">io_window.map(function (win) &#123; return win.innerWidth &#125;) // IO(1430)</div><div class="line">io_window.map(_.prop(&apos;location&apos;)).map(_.prop(&apos;href&apos;)).map(split(&apos;/&apos;)); // IO([&quot;http:&quot;, &quot;&quot;, &quot;localhost:8000&quot;, &quot;blog&quot;, &quot;posts&quot;])</div><div class="line">// $ :: String -&gt; IO [DOM]</div><div class="line">var $ = function(selector) &#123;</div><div class="line">  return new IO(function()&#123; return document.querySelectorAll(selector); &#125;);</div><div class="line">&#125;</div><div class="line">$(&apos;#myDiv&apos;).map(head).map(function(div)&#123; return div.innerHTML; &#125;); // IO(&apos;I am some inner html&apos;)</div></pre></td></tr></table></figure>

**解析url参数**
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">纯代码库: lib/params.js</div><div class="line">var url = new IO(function () &#123; return window.location.href; &#125;);</div><div class="line">// toPairs = String -&gt; [[String]]</div><div class="line">var toPairs = compose(map(split(&apos;=&apos;), split(&apos;&amp;&apos;));</div><div class="line">// params :: String -&gt; [[String]]</div><div class="line">var params = conmpose(toPairs, last, split(&apos;?&apos;));</div><div class="line">// findParam = String -&gt; Io Maybe [String]</div><div class="line">var findParam = function (key) &#123;</div><div class="line">	return map(compose(Maybe.of, filter(compose(eq(key), head)), params), url);</div><div class="line">&#125;;</div><div class="line">// 调用 __value() 来运行它！</div><div class="line">findParam(&apos;searchTerm&apos;).__value();</div><div class="line">// Maybe([&apos;searchTerm&apos;, &apos;wafflehouse&apos;])</div></pre></td></tr></table></figure>
</code></pre><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// Postgres.connect :: Url -&gt; IO DbConnection</div><div class="line">// runQuery :: DbConnection -&gt; ResultSet</div><div class="line">// readFile :: String -&gt; Task Error String</div><div class="line">// Pure application</div><div class="line">//=====================</div><div class="line">//  dbUrl :: Config -&gt; Either Error Url</div><div class="line">var dbUrl = function(c) &#123;</div><div class="line">  return (c.uname &amp;&amp; c.pass &amp;&amp; c.host &amp;&amp; c.db)</div><div class="line">	? Right.of(&quot;db:pg://&quot;+c.uname+&quot;:&quot;+c.pass+&quot;@&quot;+c.host+&quot;5432/&quot;+c.db)</div><div class="line">	: Left.of(Error(&quot;Invalid config!&quot;));</div><div class="line">&#125;</div><div class="line">//  connectDb :: Config -&gt; Either Error (IO DbConnection)</div><div class="line">var connectDb = compose(map(Postgres.connect), dbUrl);</div><div class="line">//  getConfig :: Filename -&gt; Task Error (Either Error (IO DbConnection))</div><div class="line">var getConfig = compose(map(compose(connectDB, JSON.parse)), readFile);</div><div class="line">// Impure calling code</div><div class="line">//=====================</div><div class="line">getConfig(&quot;db.json&quot;).fork(</div><div class="line">  logErr(&quot;couldn&apos;t read file&quot;), either(console.log, map(runQuery))</div><div class="line">);</div></pre></td></tr></table></figure>
</code></pre><h3 id="一些理论"><a href="#一些理论" class="headerlink" title="一些理论"></a>一些理论</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// identity</div><div class="line">map(id) === id;</div><div class="line">// composition</div><div class="line">compose(map(f), map(g)) === map(compose(f, g));</div></pre></td></tr></table></figure>
</code></pre><p>参考：</p>
<blockquote>
<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#自由定理" target="_blank" rel="external">js函数式编程</a>    </p>
</blockquote>
<p>参考：</p>
<blockquote>
<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#自由定理" target="_blank" rel="external">js函数式编程</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;特百惠&quot;&gt;&lt;a href=&quot;#特百惠&quot; class=&quot;headerlink&quot; title=&quot;特百惠&quot;&gt;&lt;/a&gt;特百惠&lt;/h2&gt;&lt;p&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;强大的容器&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-3</title>
    <link href="https://fanerge.github.io/2017/07/21/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-3/"/>
    <id>https://fanerge.github.io/2017/07/21/js函数式编程-3/</id>
    <published>2017-07-21T11:11:19.000Z</published>
    <updated>2017-07-21T15:15:17.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="声明式代码"><a href="#声明式代码" class="headerlink" title="声明式代码"></a>声明式代码</h3><ol>
<li><p>理解命令式与声明式</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 命令式</div><div class="line">var makes = [];</div><div class="line">for (let i, len = cars.length; i++) &#123;</div><div class="line">	makes.push(cars[i]make)	</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 声明式</div><div class="line">var makes = cars.map((car) =&gt; &#123; return car.make; &#125;)</div><div class="line">总结：</div><div class="line">命令式的循环要求你必须先实例化一个数组，而且执行完这个实例化语句之后，解释器才继续执行后面的代码。然后再直接迭代 cars 列表，手动增加计数器，把各种零零散散的东西都展示出来...实在是直白得有些露骨。</div><div class="line">何收集，都有很大的自由度。它指明的是做什么，不是怎么做。因此，它是正儿八经的声明式代码。</div></pre></td></tr></table></figure>
</li>
<li><p>例子</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 命令式 --- 硬编码了那种一步接一步的执行方式。</div><div class="line">var authenticate = function (form) &#123;</div><div class="line">	var user = toUser(form);</div><div class="line">	return logIn(user);</div><div class="line">&#125;</div><div class="line">// 声明式 --- 用户验证是 toUser 和 logIn 两个行为的组合。</div><div class="line">var authenticate = compose(logIn, toUser)</div></pre></td></tr></table></figure>
</li>
<li><p>示例<a href="https://github.com/fanerge/Functional-Programming" target="_blank" rel="external">函数式编程demo</a><br> 1.根据特定搜索关键字构造 url<br> 2.向 flickr 发送 api 请求 （不纯）<br> 3.把返回的 json 转为 html 图片<br> 4.把图片放到屏幕上 （不纯）</p>
</li>
<li>有原则的重构<br> // map 的组合律<br> var law = compose(map(f), map(g)) === map(compose(f, g))</li>
</ol>
<h3 id="Hindley-Milner-类型签名"><a href="#Hindley-Milner-类型签名" class="headerlink" title="Hindley-Milner 类型签名"></a>Hindley-Milner 类型签名</h3><ol>
<li>初始类型<br> 类型签名作用：短短一行，就能暴露函数的行为和目的，可以用类型签名生成文档，也可以用注释来达到区分类型的目的。</li>
<li><p>Hindley-Milner 系统</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// capitalize :: String -&gt; String （表示输入为string，输出也为string）</div><div class="line">var capitalize = function (s) &#123;</div><div class="line">	return toUpperCase(head(s)) + toLowerCase(tail(s));</div><div class="line">&#125;</div><div class="line">// 使用</div><div class="line">capitalize(&apos;fanerge&apos;) // &apos;Fanerge&apos;</div><div class="line"></div><div class="line">//  id :: a -&gt; a （同一类型的）</div><div class="line">var id = function(x)&#123; return x; &#125;</div><div class="line"></div><div class="line">//  map :: (a -&gt; b) -&gt; [a] -&gt; [b]</div><div class="line">var map = curry(function(f, xs)&#123;</div><div class="line">  return xs.map(f);</div><div class="line">&#125;);</div><div class="line">// 说明</div><div class="line">给定一个从 a 到 b 的函数和一个 a 类型的数组作为参数，它就能返回一个 b 类型的数组。</div></pre></td></tr></table></figure>
</li>
<li><p>缩小可能性范围（parametricity）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// head :: [a] -&gt; a</div><div class="line">它接受 [a] 返回 a,参数是个数组</div></pre></td></tr></table></figure>
</li>
<li><p>自由定理（free theorems）</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// head :: [a] -&gt; a</div><div class="line">compose(f, head) == compose(head, map(f));</div><div class="line">等式左边说的是，先获取数组的头部（译者注：即第一个元素），然后对它调用函数 f；等式右边说的是，先对数组中的每一个元素调用 f，然后再取其返回结果的头部。这两个表达式的作用是相等的，但是前者要快得多。</div></pre></td></tr></table></figure>
</li>
</ol>
<p>参考：</p>
<blockquote>
<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#自由定理" target="_blank" rel="external">js函数式编程</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实例应用&quot;&gt;&lt;a href=&quot;#实例应用&quot; class=&quot;headerlink&quot; title=&quot;实例应用&quot;&gt;&lt;/a&gt;实例应用&lt;/h2&gt;&lt;p&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;声明式代码&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程-2</title>
    <link href="https://fanerge.github.io/2017/07/20/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-2/"/>
    <id>https://fanerge.github.io/2017/07/20/js函数式编程-2/</id>
    <published>2017-07-20T11:11:05.000Z</published>
    <updated>2017-07-21T15:17:20.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码组合（compose）"><a href="#代码组合（compose）" class="headerlink" title="代码组合（compose）"></a>代码组合（compose）</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="先上手一个组合函数的例子"><a href="#先上手一个组合函数的例子" class="headerlink" title="先上手一个组合函数的例子"></a>先上手一个组合函数的例子</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var compose = function (f, g) &#123; // 执行顺序为从右到左</div><div class="line">	return function (x) &#123;</div><div class="line">		return f(g(x));</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">// f 和 g 都是函数，x 是在它们之间通过“管道”传输的值。</div><div class="line">var toUppercase = function (x) &#123; return x.toUpperCase() &#125;;</div><div class="line">var exclaim = function (x) &#123; return `$&#123;x&#125;!` &#125;;</div><div class="line">var shout = compose(exclaim, toUppercase);</div><div class="line">var test = shout(&apos;I am fanerge&apos;)</div><div class="line">console.log(test) // I AM FANERGE!</div></pre></td></tr></table></figure>
</code></pre><h3 id="组合的特性"><a href="#组合的特性" class="headerlink" title="组合的特性"></a>组合的特性</h3><pre><code>1. 结合律（associativity）    
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var associative = compose(f, compose(g, h)) === compose(compose(f, g), h)</div><div class="line">// 必须满足相同的执行顺序及h-g-f（从右到左）</div><div class="line">var loudLastUpper = compose(exclaim, toUpperCase, head, reverse);</div><div class="line">// 或</div><div class="line">var last = compose(head, reverse);</div><div class="line">var loudLastUpper = compose(exclaim, toUpperCase, last);</div><div class="line">// 或</div><div class="line">var last = compose(head, reverse);</div><div class="line">var angry = compose(exclaim, toUpperCase);</div><div class="line">var loudLastUpper = compose(angry, last);</div></pre></td></tr></table></figure>

**其实只要把握好（从右向左执行的顺序即可）**
2. pointfree模式
定义：永远不必说出你的数据，函数无须提及将要操作的数据是什么样的。
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//非 pointfree，因为提到了数据：word</div><div class="line">var snakeCase = function (word) &#123;</div><div class="line">	return word.toLowerCase().replace(/\s+/ig, &apos;_&apos;);</div><div class="line">&#125;</div><div class="line">// pointfree</div><div class="line">var snakeCase = compose(replace(/\s+/ig, &apos;_&apos;), toLowerCase)</div></pre></td></tr></table></figure>
</code></pre><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	// 正确做法：每个函数都接受一个实际的参数</div><div class="line">	var latin = compose(map(angry), reverse) // angry = compose(exclaim, toUpperCase)</div><div class="line">	latin([&quot;frog&quot;, &quot;eyes&quot;]) // [&apos;EYES!&apos;,&apos;FROG!&apos;]</div><div class="line"></div><div class="line">	// 不纯的 trace 函数来追踪代码的执行情况。</div><div class="line">	var trace = curry(function(tag, x)&#123;</div><div class="line">	  console.log(tag, x);</div><div class="line">	  return x;</div><div class="line">	&#125;);</div><div class="line">	// 使用</div><div class="line">	var dasherize = compose(join(&apos;-&apos;), toLower, trace(&quot;after split&quot;), split(&apos; &apos;), replace(/\s&#123;2,&#125;/ig, &apos; &apos;));</div><div class="line">	// after split [ &apos;The&apos;, &apos;world&apos;, &apos;is&apos;, &apos;a&apos;, &apos;vampire&apos; ]</div><div class="line"></div><div class="line">### 组合背后的理论 --- 范畴学（category theory）</div><div class="line">	作用：范畴学主要处理对象（object）、态射（morphism）和变化式（transformation）</div><div class="line">	**对象的搜集**</div><div class="line">	对象就是数据类型，例如 String、Boolean、Number 和 Object 等等。</div><div class="line">	通常我们把数据类型视作所有可能的值的一个集合（set）。</div><div class="line">	**态射的搜集**</div><div class="line">	态射是标准的、普通的纯函数。</div><div class="line">	**态射的组合**</div><div class="line">	var g = function(x)&#123; return x.length; &#125;;</div><div class="line">	var f = function(x)&#123; return x === 4; &#125;;</div><div class="line">	var isFourLetterWord = compose(f, g);</div><div class="line">	var test = isFourLetterWord(&apos;fanerge&apos;) // false</div><div class="line">	**identity 这个独特的态射**</div><div class="line">	identity 这个独特的态射</div></pre></td></tr></table></figure>

// id 的实用函数
var id = function (x) { return x };
// 结论成立
compose(id, f) === compose(f, id) === f;
总结：组合像一系列管道那样把不同的函数联系在一起，数据就可以也必须在其中流动——毕竟纯函数就是输入对输出

```
</code></pre><p>参考：</p>
<blockquote>
<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch7.html#自由定理" target="_blank" rel="external">js函数式编程</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码组合（compose）&quot;&gt;&lt;a href=&quot;#代码组合（compose）&quot; class=&quot;headerlink&quot; title=&quot;代码组合（compose）&quot;&gt;&lt;/a&gt;代码组合（compose）&lt;/h2&gt;&lt;p&gt;&lt;em&gt;如有不正确的地方，请大家提出来，我会更正，共
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>js函数式编程</title>
    <link href="https://fanerge.github.io/2017/07/18/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-1/"/>
    <id>https://fanerge.github.io/2017/07/18/js函数式编程-1/</id>
    <published>2017-07-18T13:52:23.000Z</published>
    <updated>2017-07-19T15:21:11.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刚下班回家，最近打算利用空余时间撸函数式编程"><a href="#刚下班回家，最近打算利用空余时间撸函数式编程" class="headerlink" title="刚下班回家，最近打算利用空余时间撸函数式编程"></a>刚下班回家，最近打算利用空余时间撸函数式编程</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="一等公民的函数"><a href="#一等公民的函数" class="headerlink" title="一等公民的函数"></a>一等公民的函数</h3><ol>
<li>与其他数据类型一样，可以把函数存在数组里，当作参数传递，赋值给变量…等等。</li>
</ol>
<h3 id="纯函数的理解"><a href="#纯函数的理解" class="headerlink" title="纯函数的理解"></a>纯函数的理解</h3><ol>
<li><p>定义：纯函数的定义是因为对相同的输入它保证能返回相同的输出。    </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var xs = [1,2,3,4,5];</div><div class="line">// 纯的</div><div class="line">xs.slice(0,3);</div><div class="line">//=&gt; [1,2,3]</div><div class="line">xs.slice(0,3);</div><div class="line">//=&gt; [1,2,3]</div><div class="line"></div><div class="line">// 不纯的</div><div class="line">xs.splice(0,3);</div><div class="line">//=&gt; [1,2,3]</div><div class="line">xs.splice(0,3);</div><div class="line">//=&gt; [4,5]</div></pre></td></tr></table></figure>
</li>
<li><p>纯函数中的副作用<br> 副作用的定义：只要是跟函数外部环境发生的交互就都是副作用（更改文件系统、往数据库插入记录）</p>
</li>
<li>纯函数的特点<br> 可缓存性（Cacheable）<br> 可移植性／自文档化（Portable / Self-Documenting）<br> 可测试性（Testable）<br> 合理性（Reasonable）<br> 合理性（Reasonable）</li>
</ol>
<h3 id="柯里化（curry）"><a href="#柯里化（curry）" class="headerlink" title="柯里化（curry）"></a>柯里化（curry）</h3><ol>
<li><p>定义：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var add = function (x) &#123;</div><div class="line">	return function (y) &#123;</div><div class="line">		return x + y;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var addTen = add(10)</div><div class="line">console.log(addTen(1)) // 11</div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var curry = require(&apos;lodash&apos;).curry; // lodash.js是一个工具函数库</div><div class="line">var match = curry(function (what, str) &#123;</div><div class="line">	return str.match(what)</div><div class="line">&#125;)</div><div class="line">// 使用</div><div class="line">**match(/\s+/g, &apos;hello world&apos;) // [&apos; &apos;]**</div><div class="line">**match(/\s+/g)(&apos;hello world&apos;) // [&apos; &apos;]**</div><div class="line">var hasSpaces = match(/\s+/g) // function (x) &#123; return x.match(/\s+/g) &#125;</div><div class="line">hasSpaces(&apos;hello world&apos;) // [&apos; &apos;]</div><div class="line"></div><div class="line">// 再来一个列子</div><div class="line">var curry = require(&apos;lodash&apos;).curry; // lodash.js是一个工具函数库</div><div class="line">var replace = curry(function(what, replacement, str) &#123;</div><div class="line">  return str.replace(what, replacement);</div><div class="line">&#125;)</div><div class="line">var noVowels = replace(/[aeiou]/ig) (传入第一个参数)// function (replacement, x) &#123; return x.replace(/[aeiou]/ig, replacement) &#125;</div><div class="line">var censored = noVowels(&apos;*&apos;) (传入第二个参数)// function (x) &#123; return x.replace(/[aeiou]/ig, &apos;*&apos;) &#125;</div><div class="line">var end = censored(&apos;Chocolate Rain&apos;) (传入第三个参数)// &apos;Ch*c*l*t* R**n&apos;</div></pre></td></tr></table></figure>
<p> 通过传递一到两个参数调用函数，就能得到一个记住了这些参数的新函数。<br> 只传给函数一部分参数通常也叫做局部调用（partial application）</p>
<p> <strong>高阶函数：参数或返回值为函数的函数（higher order function）</strong></p>
<p> 当我们谈论纯函数的时候，我们说它们接受一个输入返回一个输出。<br> curry 函数所做的正是这样：每传递一个参数调用函数，就返回一个新函数处理剩余的参数。这就是一个输入对应一个输出啊。<br> <em>记于2017-07-19 23:14</em></p>
<blockquote>
<p>参考<a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#总结" target="_blank" rel="external">JS函数式编程指南</a></p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;刚下班回家，最近打算利用空余时间撸函数式编程&quot;&gt;&lt;a href=&quot;#刚下班回家，最近打算利用空余时间撸函数式编程&quot; class=&quot;headerlink&quot; title=&quot;刚下班回家，最近打算利用空余时间撸函数式编程&quot;&gt;&lt;/a&gt;刚下班回家，最近打算利用空余时间撸函数式
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
