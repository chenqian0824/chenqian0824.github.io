<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余真帆的个人博客</title>
  <subtitle>一个专注于技术的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fanerge.github.io/"/>
  <updated>2017-07-19T15:14:45.267Z</updated>
  <id>https://fanerge.github.io/</id>
  
  <author>
    <name>余真帆-fanerge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js函数式编程</title>
    <link href="https://fanerge.github.io/2017/07/18/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://fanerge.github.io/2017/07/18/js函数式编程/</id>
    <published>2017-07-18T13:52:23.000Z</published>
    <updated>2017-07-19T15:14:45.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刚下班回家，最近打算利用空余时间撸函数式编程"><a href="#刚下班回家，最近打算利用空余时间撸函数式编程" class="headerlink" title="刚下班回家，最近打算利用空余时间撸函数式编程"></a>刚下班回家，最近打算利用空余时间撸函数式编程</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="一等公民的函数"><a href="#一等公民的函数" class="headerlink" title="一等公民的函数"></a>一等公民的函数</h3><ol>
<li>与其他数据类型一样，可以把函数存在数组里，当作参数传递，赋值给变量…等等。</li>
</ol>
<h3 id="纯函数的理解"><a href="#纯函数的理解" class="headerlink" title="纯函数的理解"></a>纯函数的理解</h3><ol>
<li><p>定义：纯函数的定义是因为对相同的输入它保证能返回相同的输出。    </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var xs = [1,2,3,4,5];</div><div class="line">// 纯的</div><div class="line">xs.slice(0,3);</div><div class="line">//=&gt; [1,2,3]</div><div class="line">xs.slice(0,3);</div><div class="line">//=&gt; [1,2,3]</div><div class="line"></div><div class="line">// 不纯的</div><div class="line">xs.splice(0,3);</div><div class="line">//=&gt; [1,2,3]</div><div class="line">xs.splice(0,3);</div><div class="line">//=&gt; [4,5]</div></pre></td></tr></table></figure>
</li>
<li><p>纯函数中的副作用<br> 副作用的定义：只要是跟函数外部环境发生的交互就都是副作用（更改文件系统、往数据库插入记录）</p>
</li>
<li>纯函数的特点<br> 可缓存性（Cacheable）<br> 可移植性／自文档化（Portable / Self-Documenting）<br> 可测试性（Testable）<br> 合理性（Reasonable）<br> 合理性（Reasonable）</li>
</ol>
<h3 id="柯里化（curry）"><a href="#柯里化（curry）" class="headerlink" title="柯里化（curry）"></a>柯里化（curry）</h3><ol>
<li><p>定义：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var add = function (x) &#123;</div><div class="line">	return function (y) &#123;</div><div class="line">		return x + y;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var addTen = add(10)</div><div class="line">console.log(addTen(1)) // 11</div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var curry = require(&apos;lodash&apos;).curry; // lodash.js是一个工具函数库</div><div class="line">var match = curry(function (what, str) &#123;</div><div class="line">	return str.match(what)</div><div class="line">&#125;)</div><div class="line">// 使用</div><div class="line">match(/\s+/g, &apos;hello world&apos;) // [&apos; &apos;]</div><div class="line">match(/\s+/g)(&apos;hello world&apos;) // [&apos; &apos;]</div><div class="line">var hasSpaces = match(/\s+/g) // function (x) &#123; return x.match(/\s+/g) &#125;</div><div class="line">hasSpaces(&apos;hello world&apos;) // [&apos; &apos;]</div><div class="line"></div><div class="line">// 再来一个列子</div><div class="line">var curry = require(&apos;lodash&apos;).curry; // lodash.js是一个工具函数库</div><div class="line">var replace = curry(function(what, replacement, str) &#123;</div><div class="line">  return str.replace(what, replacement);</div><div class="line">&#125;)</div><div class="line">var noVowels = replace(/[aeiou]/ig) (传入第一个参数)// function (replacement, x) &#123; return x.replace(/[aeiou]/ig, replacement) &#125;</div><div class="line">var censored = noVowels(&apos;*&apos;) (传入第二个参数)// function (x) &#123; return x.replace(/[aeiou]/ig, &apos;*&apos;) &#125;</div><div class="line">var end = censored(&apos;Chocolate Rain&apos;) (传入第三个参数)// &apos;Ch*c*l*t* R**n&apos;</div></pre></td></tr></table></figure>
<p> 通过传递一到两个参数调用函数，就能得到一个记住了这些参数的新函数。<br> 只传给函数一部分参数通常也叫做局部调用（partial application）</p>
<p> <strong>高阶函数：参数或返回值为函数的函数（higher order function）</strong></p>
<p> 当我们谈论纯函数的时候，我们说它们接受一个输入返回一个输出。<br> curry 函数所做的正是这样：每传递一个参数调用函数，就返回一个新函数处理剩余的参数。这就是一个输入对应一个输出啊。<br> <em>记与2017-07-19 23:14</em></p>
<blockquote>
<p>参考<a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html#总结" target="_blank" rel="external">JS函数式编程指南</a></p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;刚下班回家，最近打算利用空余时间撸函数式编程&quot;&gt;&lt;a href=&quot;#刚下班回家，最近打算利用空余时间撸函数式编程&quot; class=&quot;headerlink&quot; title=&quot;刚下班回家，最近打算利用空余时间撸函数式编程&quot;&gt;&lt;/a&gt;刚下班回家，最近打算利用空余时间撸函数式
    
    </summary>
    
      <category term="函数式编程" scheme="https://fanerge.github.io/categories/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="函数式编程" scheme="https://fanerge.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue  end</title>
    <link href="https://fanerge.github.io/2017/07/17/vue-end/"/>
    <id>https://fanerge.github.io/2017/07/17/vue-end/</id>
    <published>2017-07-17T14:16:17.270Z</published>
    <updated>2017-07-18T13:58:43.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天完成后台界面中引入iconfont图标和添加全屏功能screenfull"><a href="#今天完成后台界面中引入iconfont图标和添加全屏功能screenfull" class="headerlink" title="今天完成后台界面中引入iconfont图标和添加全屏功能screenfull"></a>今天完成后台界面中引入<a href="http://www.iconfont.cn" target="_blank" rel="external">iconfont</a>图标和添加全屏功能<a href="">screenfull</a></h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="引入iconfont图标，这是阿里的开源产品，个人感觉不错，其中symbol方式应该会成为未来的主流方式（不支持ie8）"><a href="#引入iconfont图标，这是阿里的开源产品，个人感觉不错，其中symbol方式应该会成为未来的主流方式（不支持ie8）" class="headerlink" title="引入iconfont图标，这是阿里的开源产品，个人感觉不错，其中symbol方式应该会成为未来的主流方式（不支持ie8）"></a>引入iconfont图标，这是阿里的开源产品，个人感觉不错，其中symbol方式应该会成为未来的主流方式（不支持ie8）</h3><ol>
<li>进入iconfont后，创建项目，把自己喜欢的图标都放到项目中去，点击下载这里我们只需要iconfont.js文件</li>
<li><p>在main.js中引入 </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &apos;@/assets/icon-font/iconfont&apos; // 引入iconfont图库</div></pre></td></tr></table></figure>
</li>
<li><p>这里我把它单独封装一个组件，以便其他地方使用(直接贴上源码了，都能看懂)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">	&lt;svg class=&quot;icon&quot; :style=&quot;&#123;width: width + &apos;em&apos;, height: height + &apos;em&apos;, verticalAlign: verticalAlign + &apos;em&apos;&#125;&quot; aria-hidden=&quot;true&quot;&gt;</div><div class="line">	  &lt;use :xlink:href=&quot;iconName&quot;&gt;&lt;/use&gt;</div><div class="line">	&lt;/svg&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  export default &#123;</div><div class="line">	name: &apos;iconfont&apos;,</div><div class="line">	props: &#123;</div><div class="line">		icon: &#123;</div><div class="line">			type: String,</div><div class="line">			required: true </div><div class="line">		&#125;,</div><div class="line">		width: &#123;</div><div class="line">			type: Number,</div><div class="line">			default: 1</div><div class="line">		&#125;,</div><div class="line">		height: &#123;</div><div class="line">			type: Number,</div><div class="line">			default: 1</div><div class="line">		&#125;,</div><div class="line">		verticalAlign: &#123;</div><div class="line">			type: Number,</div><div class="line">			default: -0.15</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	data () &#123;</div><div class="line">	  return &#123;</div><div class="line">	  &#125;</div><div class="line">	&#125;,</div><div class="line">	computed: &#123;</div><div class="line">		iconName () &#123;</div><div class="line">			return `#$&#123;this.icon&#125;`</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style scoped&gt;</div><div class="line">  .icon &#123;</div><div class="line">	   fill: currentColor;</div><div class="line">	   overflow: hidden;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用的时候</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iconfont icon=&quot;icon-daxiang&quot; :width=&quot;2&quot; :height=&quot;2&quot; :verticalAlign=&quot;-0.5&quot;&gt;&lt;/iconfont&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="添加全屏功能"><a href="#添加全屏功能" class="headerlink" title="添加全屏功能"></a>添加全屏功能</h3><ol>
<li>安装依赖 npm i screenfull -S</li>
<li>我还是封装成组件，一遍其他项目使用(贴原代码) <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">	&lt;iconfont @click.native=&quot;toggleFullScreen&quot; :icon=&quot;iconType&quot;&gt;&lt;/iconfont&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import screenfull from &apos;screenfull&apos;</div><div class="line">import iconfont from &apos;@/components/iconfont&apos;</div><div class="line">  export default &#123;</div><div class="line">	name: &apos;screenfull&apos;,</div><div class="line">	data () &#123;</div><div class="line">	  return &#123;</div><div class="line">		isFullscreen: false,</div><div class="line">		iconType: &apos;icon-quanping&apos;</div><div class="line">	  &#125;</div><div class="line">	&#125;,</div><div class="line">	methods: &#123;</div><div class="line">		toggleFullScreen () &#123;</div><div class="line">			if (!screenfull.enabled) &#123;</div><div class="line">				this.$message(&#123;</div><div class="line">				  message: &apos;you browser can not work&apos;,</div><div class="line">				  type: &apos;warning&apos;</div><div class="line">				&#125;);</div><div class="line">				return false;</div><div class="line">			&#125;</div><div class="line">			this.iconType = this.isFullscreen ? &apos;icon-quanping&apos; : &apos;icon-tuichuquanping&apos;</div><div class="line">			screenfull.toggle()</div><div class="line">			this.isFullscreen = !this.isFullscreen</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	components: &#123;</div><div class="line">		iconfont</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style scoped&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>后台系统，先做的这里，以后在添加。打算接着撸一段事件的函数式编程</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今天完成后台界面中引入iconfont图标和添加全屏功能screenfull&quot;&gt;&lt;a href=&quot;#今天完成后台界面中引入iconfont图标和添加全屏功能screenfull&quot; class=&quot;headerlink&quot; title=&quot;今天完成后台界面中引入iconf
    
    </summary>
    
      <category term="vue" scheme="https://fanerge.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://fanerge.github.io/tags/vue/"/>
    
      <category term="element-ui" scheme="https://fanerge.github.io/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>vue vuex</title>
    <link href="https://fanerge.github.io/2017/07/12/vue-vuex/"/>
    <id>https://fanerge.github.io/2017/07/12/vue-vuex/</id>
    <published>2017-07-12T13:57:30.000Z</published>
    <updated>2017-07-12T14:17:02.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天来总结下，在项目中使用vuex，项目采用easy-mock模拟数据"><a href="#今天来总结下，在项目中使用vuex，项目采用easy-mock模拟数据" class="headerlink" title="今天来总结下，在项目中使用vuex，项目采用easy-mock模拟数据"></a>今天来总结下，在项目中使用vuex，项目采用<a href="https://easy-mock.com" target="_blank" rel="external">easy-mock</a>模拟数据</h2><p><em>如有不正确的地方，请大家联系我，谢谢。</em></p>
<h3 id="首先在项目中添加vuex"><a href="#首先在项目中添加vuex" class="headerlink" title="首先在项目中添加vuex"></a>首先在项目中添加vuex</h3><ol>
<li><p>在store文件夹下面建立index.js,内容如下</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">  import Vue from &apos;vue&apos;</div><div class="line">  import Vuex from &apos;vuex&apos;</div><div class="line">  import &#123; login &#125; from &apos;@/api/http&apos; // 用于登录的</div><div class="line">  Vue.use(Vuex)</div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123; // 保存全局state --- this.$store.state[key]-- 放在computed</div><div class="line">	userInfo: null,</div><div class="line">	token: &apos;&apos;</div><div class="line">  &#125;,</div><div class="line">  getters: &#123; // 对state进行不修改操作，相当于数据库的查操作 --- this.$store.getter[key]-- 放在computed</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  mutations: &#123; // 同步操作state --- this.$store.commit(&apos;func&apos;,payload)-- 放在methods</div><div class="line">	login (state, payload) &#123;</div><div class="line">	  state.userInfo = payload</div><div class="line">	&#125;,</div><div class="line">	setToken (state, payload) &#123;</div><div class="line">	  state.token = payload</div><div class="line">	&#125;</div><div class="line">  &#125;,</div><div class="line">  actions: &#123; // 异步操作state --- this.$store.dispatch(&apos;func&apos;,payload)-- 放在methods</div><div class="line">	login (&#123; commit &#125;, userInfo) &#123;</div><div class="line">	  return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">		login(userInfo.username, userInfo.password)</div><div class="line">		.then((res) =&gt; &#123;</div><div class="line">		  commit(&apos;login&apos;, res.userInfo) // 全局state中保存用户信息</div><div class="line">		  commit(&apos;setToken&apos;, res.token) // 全局state中保存token</div><div class="line">		  resolve(res) // 这里很关键，必须要传递res参数，登录之后的其他操作</div><div class="line">		&#125;)</div><div class="line">		.catch((err) =&gt; &#123;</div><div class="line">		  reject(err)</div><div class="line">		&#125;)</div><div class="line">	  &#125;)</div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">export default store</div></pre></td></tr></table></figure>
</li>
<li><p>在main.js中添加</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import store from &apos;./store&apos;</div><div class="line">new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  router,</div><div class="line">  store,</div><div class="line">  template: &apos;&lt;App/&gt;&apos;,</div><div class="line">  components: &#123;App&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>在api文件夹中http.js文件中</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import http from &apos;./axios&apos;</div><div class="line">export function login (username, password) &#123;</div><div class="line">  return http.post(&apos;user/login&apos;, &#123;</div><div class="line">	username,</div><div class="line">	password</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在登录组件中login.vue    </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">     login (data) &#123;</div><div class="line">       this.$store.dispatch(&apos;login&apos;, data)</div><div class="line">       .then((res) =&gt; &#123;</div><div class="line">         console.dir(res)</div><div class="line">       &#125;)</div><div class="line">       .catch((err) =&gt; &#123;</div><div class="line">         console.error(err)</div><div class="line">       &#125;)</div><div class="line">     &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今天来总结下，在项目中使用vuex，项目采用easy-mock模拟数据&quot;&gt;&lt;a href=&quot;#今天来总结下，在项目中使用vuex，项目采用easy-mock模拟数据&quot; class=&quot;headerlink&quot; title=&quot;今天来总结下，在项目中使用vuex，项目采用
    
    </summary>
    
      <category term="vue" scheme="https://fanerge.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://fanerge.github.io/tags/vue/"/>
    
      <category term="element-ui" scheme="https://fanerge.github.io/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>vue admin</title>
    <link href="https://fanerge.github.io/2017/07/11/vue-admin/"/>
    <id>https://fanerge.github.io/2017/07/11/vue-admin/</id>
    <published>2017-07-11T12:54:43.000Z</published>
    <updated>2017-07-18T13:58:47.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近个人接触了一些后台管理系统的搭建，参考了很多资料，打算把自己的后台管理系统开发经验写成博客，可能会帮助到一些想做后台管理系统的朋友，更主要的记录整个开发思路，以及vue的一整套解决方案。"><a href="#最近个人接触了一些后台管理系统的搭建，参考了很多资料，打算把自己的后台管理系统开发经验写成博客，可能会帮助到一些想做后台管理系统的朋友，更主要的记录整个开发思路，以及vue的一整套解决方案。" class="headerlink" title="最近个人接触了一些后台管理系统的搭建，参考了很多资料，打算把自己的后台管理系统开发经验写成博客，可能会帮助到一些想做后台管理系统的朋友，更主要的记录整个开发思路，以及vue的一整套解决方案。"></a>最近个人接触了一些后台管理系统的搭建，参考了很多资料，打算把自己的后台管理系统开发经验写成博客，可能会帮助到一些想做后台管理系统的朋友，更主要的记录整个开发思路，以及vue的一整套解决方案。</h2><p><em>如有不正确的地方，请大家提出来，我会更正，共同进步，谢谢。</em></p>
<h3 id="后台管理系统主要功能-vue-cli搭建项目"><a href="#后台管理系统主要功能-vue-cli搭建项目" class="headerlink" title="后台管理系统主要功能(vue-cli搭建项目)"></a>后台管理系统主要功能(vue-cli搭建项目)</h3><ol>
<li>element-ui 饿了么出品的vue2.0 pc端 UI框架</li>
<li>axios vue官方推荐的请求库 支持Promise</li>
<li>html5的本地存储LocalStorage（用于记住密码等） 与 SessionStorage （用于存储个人信息和token等）</li>
<li>浏览器样式兼容库 normalize.css 格式化css</li>
<li>类似于YouTube的页面跳转精度条-nprogress 轻量的全局进度条控制</li>
<li>官方提供的状态管理库 vuex</li>
<li>官方提供路由 vue-router</li>
<li>集成icon-font图标(symbol方式)</li>
<li>添加全屏功能<br>（后续会继续添加）</li>
</ol>
<h3 id="先在项目中引入-element-ui"><a href="#先在项目中引入-element-ui" class="headerlink" title="先在项目中引入 element-ui"></a>先在项目中引入 <a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="external">element-ui</a></h3><ol>
<li>安装 element-ui  npm i element-ui -S</li>
<li>引入相关资源<br> import ElementUI from ‘element-ui’<br> import ‘element-ui/lib/theme-default/index.css’<br> Vue.use(ElementUI)<br> 这样你就可以愉快的在你的项目中使用element的组件了。</li>
<li>例如使用 Message 消息提示<br> 就可以在任何vue组件中 this.$message(‘这是一条消息提示’); // this指向vue实例</li>
</ol>
<h3 id="在项目中引入axios请求库axios"><a href="#在项目中引入axios请求库axios" class="headerlink" title="在项目中引入axios请求库axios"></a>在项目中引入axios请求库<a href="https://www.axios.com/" target="_blank" rel="external">axios</a></h3><ol>
<li>安装 axios npm i axios -S   </li>
<li>在使用axios的时候我们经常要进行一些封装和全局配置等<br> 我一般开发时会在src目录下新建一个api的文件夹，里面存放对axios的封装（axios.js）和项目所有请求（http.js）</li>
<li><p>这里重点讲一下axios.js这个文件夹，也就是对axios的封装以及拦截操作<br> 这里是全局配置</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var service = axios.create(&#123;</div><div class="line">  baseURL:&quot;https://some-domain.com/api/&quot;,</div><div class="line">  timeout:1000,</div><div class="line">  headers: &#123;&apos;X-Custom-Header&apos;:&apos;foobar&apos;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> 这里是request拦截操作</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// request拦截器</div><div class="line">service.interceptors.request.use(config =&gt; &#123;</div><div class="line">  if (store.getters.token) &#123; // 判断全局状态中是否有token，也就是说判断你不是合法用户</div><div class="line">	config.headers[&apos;token&apos;] = store.getters.token; // 让每个请求携带自定义token，开心不用没个请求都带上token字段了</div><div class="line">  &#125;</div><div class="line">  return config;</div><div class="line">&#125;, error =&gt; &#123;</div><div class="line">  Promise.reject(error);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p> 这里是response拦截操作</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// respone拦截器</div><div class="line">service.interceptors.response.use(</div><div class="line">  response =&gt; &#123;</div><div class="line">	// code为非20000是抛错 可结合自己业务进行修改</div><div class="line">	const res = response.data;</div><div class="line">	if (res.code !== 20000) &#123;</div><div class="line">	  // 在该页面使用element组件，别忘了需要引入哦！！</div><div class="line">	  Message(&#123;</div><div class="line">		message: res.data,</div><div class="line">		type: &apos;error&apos;,</div><div class="line">		duration: 5 * 1000</div><div class="line">	  &#125;);</div><div class="line"></div><div class="line">	  // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;</div><div class="line">	  if (res.code === 50008 || res.code === 50012 || res.code === 50014) &#123;</div><div class="line">		// 这里需要你进行相应的操作处理</div><div class="line">	  &#125;</div><div class="line">	  return Promise.reject(error);</div><div class="line">	&#125; else &#123;</div><div class="line">	  return response.data;</div><div class="line">	&#125;</div><div class="line">  &#125;,</div><div class="line">  error =&gt; &#123;</div><div class="line">	Message(&#123;</div><div class="line">	  message: error.message,</div><div class="line">	  type: &apos;error&apos;,</div><div class="line">	  duration: 5 * 1000</div><div class="line">	&#125;);</div><div class="line">	return Promise.reject(error);</div><div class="line">  &#125;</div><div class="line">)</div><div class="line">// 最后被忘了，要export 这个实例</div><div class="line">export default service;</div></pre></td></tr></table></figure>
</li>
<li><p>阻止http.js请求文件<br> 里面的内容大致是这样的</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import service from &apos;./axios&apos;</div><div class="line">const ApiUrl = &#123;</div><div class="line">	login: &apos;login/&apos;, // 存放api路径</div><div class="line">	...</div><div class="line">&#125;</div><div class="line">export default &#123;</div><div class="line">	login () &#123;</div><div class="line">		// 这里后期我会发在vuex中的actions里面</div><div class="line">		service.post(ApiUrl.login, &#123;</div><div class="line">		  username: &apos;fanerge&apos;,</div><div class="line">		  password: &apos;XXXXXX&apos;</div><div class="line">		&#125;)</div><div class="line">		.then((res) =&gt; &#123;</div><div class="line">			let resp = res.data</div><div class="line">			console.log(resp)</div><div class="line">		&#125;)</div><div class="line">		.catch((err) =&gt; &#123;</div><div class="line">			console.error(err)</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>参考<a href="https://juejin.im/post/595b4d776fb9a06bbe7dba56" target="_blank" rel="external">vueAdmin-template</a>    </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最近个人接触了一些后台管理系统的搭建，参考了很多资料，打算把自己的后台管理系统开发经验写成博客，可能会帮助到一些想做后台管理系统的朋友，更主要的记录整个开发思路，以及vue的一整套解决方案。&quot;&gt;&lt;a href=&quot;#最近个人接触了一些后台管理系统的搭建，参考了很多资
    
    </summary>
    
      <category term="vue" scheme="https://fanerge.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="https://fanerge.github.io/tags/vue/"/>
    
      <category term="element-ui" scheme="https://fanerge.github.io/tags/element-ui/"/>
    
  </entry>
  
</feed>
